<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>所有文章 - 木木飞</title>
        <link>https://mmfei.com/posts/</link>
        <description>所有文章 | 木木飞</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>wlfkongl@gmail.com (mmfei)</managingEditor>
            <webMaster>wlfkongl@gmail.com (mmfei)</webMaster><lastBuildDate>Wed, 11 Aug 2021 20:43:39 &#43;0800</lastBuildDate><atom:link href="https://mmfei.com/posts/" rel="self" type="application/rss+xml" /><item>
    <title>自定义macbook的右键菜单在Finder增加右键用vscode打开功能</title>
    <link>https://mmfei.com/2021/08/%E8%87%AA%E5%AE%9A%E4%B9%89macbook%E7%9A%84%E5%8F%B3%E9%94%AE%E8%8F%9C%E5%8D%95%E5%9C%A8finder%E5%A2%9E%E5%8A%A0%E5%8F%B3%E9%94%AE%E7%94%A8vscode%E6%89%93%E5%BC%80%E5%8A%9F%E8%83%BD/</link>
    <pubDate>Wed, 11 Aug 2021 20:43:39 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://mmfei.com/2021/08/%E8%87%AA%E5%AE%9A%E4%B9%89macbook%E7%9A%84%E5%8F%B3%E9%94%AE%E8%8F%9C%E5%8D%95%E5%9C%A8finder%E5%A2%9E%E5%8A%A0%E5%8F%B3%E9%94%AE%E7%94%A8vscode%E6%89%93%E5%BC%80%E5%8A%9F%E8%83%BD/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/images/posts/%e8%87%aa%e5%ae%9a%e4%b9%89macbook%e7%9a%84%e5%8f%b3%e9%94%ae%e8%8f%9c%e5%8d%95%e5%9c%a8Finder%e5%a2%9e%e5%8a%a0%e5%8f%b3%e9%94%ae%e7%94%a8vscode%e6%89%93%e5%bc%80%e5%8a%9f%e8%83%bd/img.png" referrerpolicy="no-referrer">
            </div>Launch Automator Create New Document Create a new Quick Action Select &ldquo;Quick Action&rdquo; Add the Action&hellip; Workflow receives current files and folders from Finder. Add a new Run Shell Script action to the workflow. (drag the &ldquo;Run Shell Script&rdquo; object, highlighted in the screenshot, to the empty window on the right) Configure the Workflow Set the Pass Input to be as arguments Paste the following in the input box: 1]]></description>
</item><item>
    <title>刷newifi路由器冲浪</title>
    <link>https://mmfei.com/2021/08/%E5%88%B7newif%E8%B7%AF%E7%94%B1%E5%99%A8%E5%86%B2%E6%B5%AA/</link>
    <pubDate>Sun, 01 Aug 2021 16:38:42 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://mmfei.com/2021/08/%E5%88%B7newif%E8%B7%AF%E7%94%B1%E5%99%A8%E5%86%B2%E6%B5%AA/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/images/posts/%e5%88%b7newifi%e8%b7%af%e7%94%b1%e5%99%a8%e5%86%b2%e6%b5%aa/img.png" referrerpolicy="no-referrer">
            </div>找路由器型号的固件 (newifi d2: MediaTek MT7621AT) 刷breed (https://breed.hackpascal.net/) 刷官方openwrt (https://openwrt.org/toh/hwdata/d-team/d-team_newifi_d2) 为了后面方便使用 , 我直接保存一份我用的文件 (我用的是自定义固件,不是上面那个官]]></description>
</item><item>
    <title>每日备份docker部署的gitlab服务的最简单方案</title>
    <link>https://mmfei.com/2021/06/%E6%AF%8F%E6%97%A5%E5%A4%87%E4%BB%BDdocker%E9%83%A8%E7%BD%B2%E7%9A%84gitlab%E6%9C%8D%E5%8A%A1%E7%9A%84%E6%9C%80%E7%AE%80%E5%8D%95%E6%96%B9%E6%A1%88/</link>
    <pubDate>Tue, 29 Jun 2021 21:09:34 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://mmfei.com/2021/06/%E6%AF%8F%E6%97%A5%E5%A4%87%E4%BB%BDdocker%E9%83%A8%E7%BD%B2%E7%9A%84gitlab%E6%9C%8D%E5%8A%A1%E7%9A%84%E6%9C%80%E7%AE%80%E5%8D%95%E6%96%B9%E6%A1%88/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/images/posts/%e6%af%8f%e6%97%a5%e5%a4%87%e4%bb%bddocker%e9%83%a8%e7%bd%b2%e7%9a%84gitlab%e6%9c%8d%e5%8a%a1%e7%9a%84%e6%9c%80%e7%ae%80%e5%8d%95%e6%96%b9%e6%a1%88/img.png" referrerpolicy="no-referrer">
            </div>每日备份docker部署的gitlab服务的最简单的方案 , 简单直接 gitlab的服务器每日执行下备份 另一台服务器每日从gitlab服务器rs]]></description>
</item><item>
    <title>保留最新n个文件的bash脚本</title>
    <link>https://mmfei.com/2021/06/%E4%BF%9D%E7%95%99%E6%9C%80%E6%96%B0n%E4%B8%AA%E6%96%87%E4%BB%B6%E7%9A%84bash%E8%84%9A%E6%9C%AC/</link>
    <pubDate>Tue, 29 Jun 2021 20:12:27 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://mmfei.com/2021/06/%E4%BF%9D%E7%95%99%E6%9C%80%E6%96%B0n%E4%B8%AA%E6%96%87%E4%BB%B6%E7%9A%84bash%E8%84%9A%E6%9C%AC/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/images/posts/%e4%bf%9d%e7%95%99%e6%9c%80%e6%96%b0n%e4%b8%aa%e6%96%87%e4%bb%b6%e7%9a%84bash%e8%84%9a%e6%9c%ac/img.png" referrerpolicy="no-referrer">
            </div>保留最新n个文件的bash脚本 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 #!/bin/sh usage() { echo &#34;Usage: $0dir&#34; echo &#34;Usage: $0dir save_number&#34; echo &#34;Usage: $0dir save_number keyword&#34; exit 1 } if [ $# -lt 1]]></description>
</item><item>
    <title>使用gitlab-ci自动部署php服务的openapi接口文档</title>
    <link>https://mmfei.com/2021/06/%E4%BD%BF%E7%94%A8gitlab-ci%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2php%E6%9C%8D%E5%8A%A1%E7%9A%84openapi%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3/</link>
    <pubDate>Tue, 22 Jun 2021 18:59:34 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://mmfei.com/2021/06/%E4%BD%BF%E7%94%A8gitlab-ci%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2php%E6%9C%8D%E5%8A%A1%E7%9A%84openapi%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/images/posts/%e4%bd%bf%e7%94%a8gitlab-ci%e8%87%aa%e5%8a%a8%e9%83%a8%e7%bd%b2php%e6%9c%8d%e5%8a%a1%e7%9a%84openapi%e6%8e%a5%e5%8f%a3%e6%96%87%e6%a1%a3/img.png" referrerpolicy="no-referrer">
            </div>前端后端交互流程 前后端频繁通过接口对接 , 维护一个真实的api文档是非常有必要的, 但是这也是一个繁重的工作. 如果你是使用 php(hyperf) + gitlab(托管]]></description>
</item><item>
    <title>如何在vscode编辑器中通过xdebug调试在docker的运行的服务</title>
    <link>https://mmfei.com/2021/06/%E5%A6%82%E4%BD%95%E5%9C%A8vscode%E7%BC%96%E8%BE%91%E5%99%A8%E4%B8%AD%E9%80%9A%E8%BF%87xdebug%E8%B0%83%E8%AF%95%E5%9C%A8docker%E7%9A%84%E8%BF%90%E8%A1%8C%E7%9A%84%E6%9C%8D%E5%8A%A1/</link>
    <pubDate>Tue, 22 Jun 2021 18:58:51 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://mmfei.com/2021/06/%E5%A6%82%E4%BD%95%E5%9C%A8vscode%E7%BC%96%E8%BE%91%E5%99%A8%E4%B8%AD%E9%80%9A%E8%BF%87xdebug%E8%B0%83%E8%AF%95%E5%9C%A8docker%E7%9A%84%E8%BF%90%E8%A1%8C%E7%9A%84%E6%9C%8D%E5%8A%A1/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/images/posts/%e5%a6%82%e4%bd%95%e5%9c%a8vscode%e7%bc%96%e8%be%91%e5%99%a8%e4%b8%ad%e9%80%9a%e8%bf%87xdebug%e8%b0%83%e8%af%95%e5%9c%a8docker%e7%9a%84%e8%bf%90%e8%a1%8c%e7%9a%84%e6%9c%8d%e5%8a%a1/img.png" referrerpolicy="no-referrer">
            </div>https://github.com/oh-my-docker-hub/oh-my-docker/blob/master/build/php7/README.php7.md docker hub : omydockerhub/php7 如何Debug容器里面运行的php服务 配置好xdebug 1 2 3 4 5 6 7 8 9 10 11 12 ; conf/conf.d/docker-php-ext-xdebug.ini ; 此文件映射到 /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini [XDebug] xdebug.default_enable=1 xdebug.remote_enable=1 xdebug.remot]]></description>
</item><item>
    <title>Mac环境安装grpc的php客户端</title>
    <link>https://mmfei.com/2021/06/mac%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85grpc%E7%9A%84php%E5%AE%A2%E6%88%B7%E7%AB%AF/</link>
    <pubDate>Tue, 22 Jun 2021 11:28:31 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://mmfei.com/2021/06/mac%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85grpc%E7%9A%84php%E5%AE%A2%E6%88%B7%E7%AB%AF/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/images/posts/mac%e7%8e%af%e5%a2%83%e5%ae%89%e8%a3%85grpc%e7%9a%84php%e5%ae%a2%e6%88%b7%e7%ab%af/featuredImage.png" referrerpolicy="no-referrer">
            </div>1 2 3 4 pecl install grpc pecl install protobuf php -m | grep grpc php -m | grep protobuf 安装超好用的grpc客户端EVANS https://github.com/ktr0731/evans 安装 1 2 brew tap ktr0731/evans brew install evans]]></description>
</item><item>
    <title>Linux根据历史记录补全bash命令autocomplete</title>
    <link>https://mmfei.com/2021/06/linux%E6%A0%B9%E6%8D%AE%E5%8E%86%E5%8F%B2%E8%AE%B0%E5%BD%95%E8%A1%A5%E5%85%A8bash%E5%91%BD%E4%BB%A4autocomplete/</link>
    <pubDate>Tue, 08 Jun 2021 11:47:50 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://mmfei.com/2021/06/linux%E6%A0%B9%E6%8D%AE%E5%8E%86%E5%8F%B2%E8%AE%B0%E5%BD%95%E8%A1%A5%E5%85%A8bash%E5%91%BD%E4%BB%A4autocomplete/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/images/posts/linux%e6%a0%b9%e6%8d%ae%e5%8e%86%e5%8f%b2%e8%ae%b0%e5%bd%95%e8%a1%a5%e5%85%a8bash%e5%91%bd%e4%bb%a4autocomplete/img.png" referrerpolicy="no-referrer">
            </div>在shell输入一个命令后 , 可以通过上下方向箭头翻出最近的历史记录. 这么好用的功能,为啥不内置呢0.0&hellip;. 1 2 3 4 cat &gt;&gt; ~/.inputrc &lt;&lt;&#39;EOF&#39; &#34;\e[A&#34;: history-search-backward]]></description>
</item><item>
    <title>怎样让nginx的配置支持https</title>
    <link>https://mmfei.com/2021/06/%E6%80%8E%E6%A0%B7%E8%AE%A9nginx%E7%9A%84%E9%85%8D%E7%BD%AE%E6%94%AF%E6%8C%81https/</link>
    <pubDate>Sat, 05 Jun 2021 23:47:17 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://mmfei.com/2021/06/%E6%80%8E%E6%A0%B7%E8%AE%A9nginx%E7%9A%84%E9%85%8D%E7%BD%AE%E6%94%AF%E6%8C%81https/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/images/posts/%e6%80%8e%e6%a0%b7%e8%ae%a9nginx%e7%9a%84%e9%85%8d%e7%bd%ae%e6%94%af%e6%8c%81https/featuredImage.png" referrerpolicy="no-referrer">
            </div>server { listen 80; server_name api.dev.com; error_page 500 502 503 504 /50x.html; error_log /data/nginx/api.dev.com/error.log; access_log /data/nginx/api.dev.com/access_$logdate.log; #root /mnt/d/wsl/www/playsmart/; index index.html index.htm index.php; location = / { proxy_set_header X-Real-IP $remote_addr; proxy_set_header Host $http_host; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_http_version 1.1; proxy_set_header Connection keep-alive; proxy_cookie_path / &quot;/; secure; HttpOnly; SameSite=strict&quot;; proxy_pass http://127.0.0.1:8080; } location / { proxy_set_header X-Real-IP $remote_addr; proxy_set_header Host $http_host; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_http_version 1.1; proxy_set_header Connection keep-alive; proxy_cookie_path / &quot;/; secure;]]></description>
</item><item>
    <title>基于github开发一个php的适用于hyperf的composer包</title>
    <link>https://mmfei.com/2021/06/%E5%9F%BA%E4%BA%8Egithub%E5%BC%80%E5%8F%91%E4%B8%80%E4%B8%AAphp%E7%9A%84%E9%80%82%E7%94%A8%E4%BA%8Ehyperf%E7%9A%84composer%E5%8C%85/</link>
    <pubDate>Sat, 05 Jun 2021 19:06:57 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://mmfei.com/2021/06/%E5%9F%BA%E4%BA%8Egithub%E5%BC%80%E5%8F%91%E4%B8%80%E4%B8%AAphp%E7%9A%84%E9%80%82%E7%94%A8%E4%BA%8Ehyperf%E7%9A%84composer%E5%8C%85/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/images/posts/%e5%9f%ba%e4%ba%8egithub%e5%bc%80%e5%8f%91%e4%b8%80%e4%b8%aaphp%e7%9a%84%e9%80%82%e7%94%a8%e4%ba%8ehyperf%e7%9a%84composer%e5%8c%85/featuredImage.png" referrerpolicy="no-referrer">
            </div>准备下环境 1 2 3 4 5 6 7 8 9 # 在github创建一个仓库 , 并clone到本地 # 计划 在 your_component 文件夹开发 your_component/your_component 包 composer create-project hyperf/hyperf-skeleton # 主项目 , 它会使用下面那个自建的组]]></description>
</item></channel>
</rss>
