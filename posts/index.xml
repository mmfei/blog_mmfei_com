<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>所有文章 - 木木飞</title>
        <link>https://mmfei.com/posts/</link>
        <description>所有文章 | 木木飞</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>wlfkongl@gmail.com (mmfei)</managingEditor>
            <webMaster>wlfkongl@gmail.com (mmfei)</webMaster><lastBuildDate>Wed, 06 Oct 2021 23:00:38 &#43;0800</lastBuildDate><atom:link href="https://mmfei.com/posts/" rel="self" type="application/rss+xml" /><item>
    <title>Mac通过brew安装php7.4&#43;swoole</title>
    <link>https://mmfei.com/2021/10/mac%E9%80%9A%E8%BF%87brew%E5%AE%89%E8%A3%85php7.4-swoole/</link>
    <pubDate>Wed, 06 Oct 2021 23:00:38 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://mmfei.com/2021/10/mac%E9%80%9A%E8%BF%87brew%E5%AE%89%E8%A3%85php7.4-swoole/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/images/posts/mac%e9%80%9a%e8%bf%87brew%e5%ae%89%e8%a3%85php7.4&#43;swoole/featuredImage.png" referrerpolicy="no-referrer">
            </div>1 2 3 4 5 brew install php@7.4 brew install openssl pecl install igbinary brew install redis pecl install swoole 这里会有三四个询问确认的 , 需要注意的是 ssl那个选项 , 要选择 yes --with-openssl-dir=/usr/local/opt/openssl@1.1 启动php服务进行调试(要带-e参数]]></description>
</item><item>
    <title>用mediainfo代替ffmpeg读取视频文件的毫秒级的时长</title>
    <link>https://mmfei.com/2021/09/%E7%94%A8mediainfo%E4%BB%A3%E6%9B%BFffmpeg%E8%AF%BB%E5%8F%96%E8%A7%86%E9%A2%91%E6%96%87%E4%BB%B6%E7%9A%84%E6%AF%AB%E7%A7%92%E7%BA%A7%E7%9A%84%E6%97%B6%E9%95%BF/</link>
    <pubDate>Wed, 15 Sep 2021 22:30:19 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://mmfei.com/2021/09/%E7%94%A8mediainfo%E4%BB%A3%E6%9B%BFffmpeg%E8%AF%BB%E5%8F%96%E8%A7%86%E9%A2%91%E6%96%87%E4%BB%B6%E7%9A%84%E6%AF%AB%E7%A7%92%E7%BA%A7%E7%9A%84%E6%97%B6%E9%95%BF/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/images/posts/%e7%94%a8mediainfo%e4%bb%a3%e6%9b%bfffmpeg%e8%af%bb%e5%8f%96%e8%a7%86%e9%a2%91%e6%96%87%e4%bb%b6%e7%9a%84%e6%af%ab%e7%a7%92%e7%ba%a7%e7%9a%84%e6%97%b6%e9%95%bf/featuredImage.png" referrerpolicy="no-referrer">
            </div>背景: 由于我们有个功能需要把用户库中的视频文件播放时长的毫秒数读取出来并入库. 经过调研以及对大名鼎鼎的ffmpeg的信仰 , 果断选了ffmpe]]></description>
</item><item>
    <title>在hyperf框架的2.2版本的单元测试开启db的事务</title>
    <link>https://mmfei.com/2021/09/%E5%9C%A8hyperf%E6%A1%86%E6%9E%B6%E7%9A%842.2%E7%89%88%E6%9C%AC%E7%9A%84%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E5%BC%80%E5%90%AFdb%E7%9A%84%E4%BA%8B%E5%8A%A1/</link>
    <pubDate>Sun, 05 Sep 2021 18:38:39 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://mmfei.com/2021/09/%E5%9C%A8hyperf%E6%A1%86%E6%9E%B6%E7%9A%842.2%E7%89%88%E6%9C%AC%E7%9A%84%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E5%BC%80%E5%90%AFdb%E7%9A%84%E4%BA%8B%E5%8A%A1/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/images/posts/%e5%9c%a8hyperf%e6%a1%86%e6%9e%b6%e7%9a%842.2%e7%89%88%e6%9c%ac%e7%9a%84%e5%8d%95%e5%85%83%e6%b5%8b%e8%af%95%e5%bc%80%e5%90%afdb%e7%9a%84%e4%ba%8b%e5%8a%a1/img_1.png" referrerpolicy="no-referrer">
            </div>背景 : 我们团队一直在使用优秀的hyperf框架 , 并在内部推行了单元测试 . 一直使用db的事务回滚的方式在测试环境跑得很顺畅 , 这样不会有脏数据.]]></description>
</item><item>
    <title>在centos8系统安装ffmpeg</title>
    <link>https://mmfei.com/2021/08/%E5%9C%A8centos8%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85ffmpeg/</link>
    <pubDate>Mon, 23 Aug 2021 20:05:44 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://mmfei.com/2021/08/%E5%9C%A8centos8%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85ffmpeg/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/images/posts/%e5%9c%a8centos8%e7%b3%bb%e7%bb%9f%e5%ae%89%e8%a3%85ffmpeg/img.png" referrerpolicy="no-referrer">
            </div>1 2 3 4 5 yum install https://dl.fedoraproject.org/pub/epel/epel-release-latest-8.noarch.rpm yum install https://download1.rpmfusion.org/free/el/rpmfusion-free-release-8.noarch.rpm https://download1.rpmfusion.org/nonfree/el/rpmfusion-nonfree-release-8.noarch.rpm yum install http://mirror.centos.org/centos/8/PowerTools/x86_64/os/Packages/SDL2-2.0.10-2.el8.x86_64.rpm yum install ffmpeg ffmpeg-devel ffmpeg -version 修正依赖的SDL的版本(SDL2-2.0.8-7.el8.x86_64.rpm =&gt; SDL2-2.0.]]></description>
</item><item>
    <title>自定义macbook的右键菜单在Finder增加右键用vscode打开功能</title>
    <link>https://mmfei.com/2021/08/%E8%87%AA%E5%AE%9A%E4%B9%89macbook%E7%9A%84%E5%8F%B3%E9%94%AE%E8%8F%9C%E5%8D%95%E5%9C%A8finder%E5%A2%9E%E5%8A%A0%E5%8F%B3%E9%94%AE%E7%94%A8vscode%E6%89%93%E5%BC%80%E5%8A%9F%E8%83%BD/</link>
    <pubDate>Wed, 11 Aug 2021 20:43:39 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://mmfei.com/2021/08/%E8%87%AA%E5%AE%9A%E4%B9%89macbook%E7%9A%84%E5%8F%B3%E9%94%AE%E8%8F%9C%E5%8D%95%E5%9C%A8finder%E5%A2%9E%E5%8A%A0%E5%8F%B3%E9%94%AE%E7%94%A8vscode%E6%89%93%E5%BC%80%E5%8A%9F%E8%83%BD/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/images/posts/%e8%87%aa%e5%ae%9a%e4%b9%89macbook%e7%9a%84%e5%8f%b3%e9%94%ae%e8%8f%9c%e5%8d%95%e5%9c%a8Finder%e5%a2%9e%e5%8a%a0%e5%8f%b3%e9%94%ae%e7%94%a8vscode%e6%89%93%e5%bc%80%e5%8a%9f%e8%83%bd/img.png" referrerpolicy="no-referrer">
            </div>Launch Automator Create New Document Create a new Quick Action Select &ldquo;Quick Action&rdquo; Add the Action&hellip; Workflow receives current files and folders from Finder. Add a new Run Shell Script action to the workflow. (drag the &ldquo;Run Shell Script&rdquo; object, highlighted in the screenshot, to the empty window on the right) Configure the Workflow Set the Pass Input to be as arguments Paste the following in the input box: 1]]></description>
</item><item>
    <title>刷newifi路由器冲浪</title>
    <link>https://mmfei.com/2021/08/%E5%88%B7newif%E8%B7%AF%E7%94%B1%E5%99%A8%E5%86%B2%E6%B5%AA/</link>
    <pubDate>Sun, 01 Aug 2021 16:38:42 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://mmfei.com/2021/08/%E5%88%B7newif%E8%B7%AF%E7%94%B1%E5%99%A8%E5%86%B2%E6%B5%AA/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/images/posts/%e5%88%b7newifi%e8%b7%af%e7%94%b1%e5%99%a8%e5%86%b2%e6%b5%aa/img.png" referrerpolicy="no-referrer">
            </div>找路由器型号的固件 (newifi d2: MediaTek MT7621AT) 刷breed (https://breed.hackpascal.net/) 刷官方openwrt (https://openwrt.org/toh/hwdata/d-team/d-team_newifi_d2) 为了后面方便使用 , 我直接保存一份我用的文件 (我用的是自定义固件,不是上面那个官]]></description>
</item><item>
    <title>搭建robot Framework Ride测试框架</title>
    <link>https://mmfei.com/2021/07/%E6%90%AD%E5%BB%BArobot-framework-ride%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/</link>
    <pubDate>Wed, 14 Jul 2021 11:25:41 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://mmfei.com/2021/07/%E6%90%AD%E5%BB%BArobot-framework-ride%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/images/posts/%e6%90%ad%e5%bb%barobot-framework-ride%e6%b5%8b%e8%af%95%e6%a1%86%e6%9e%b6/featuredImage.png" referrerpolicy="no-referrer">
            </div>方案1 (直接本地安装) 1 2 3 4 5 6 7 8 9 10 # pip install -U robotframework pip install -U -r https://raw.githubusercontent.com/robotframework/RIDE/master/requirements.txt pip install -U robotframework-ride mkdir project; cd project; pipenv --three pipenv install robotframework-ride robotframework-ride 方案2 (docker方案 , 容器运行ride.py +]]></description>
</item><item>
    <title>每日备份docker部署的gitlab服务的最简单方案</title>
    <link>https://mmfei.com/2021/06/%E6%AF%8F%E6%97%A5%E5%A4%87%E4%BB%BDdocker%E9%83%A8%E7%BD%B2%E7%9A%84gitlab%E6%9C%8D%E5%8A%A1%E7%9A%84%E6%9C%80%E7%AE%80%E5%8D%95%E6%96%B9%E6%A1%88/</link>
    <pubDate>Tue, 29 Jun 2021 21:09:34 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://mmfei.com/2021/06/%E6%AF%8F%E6%97%A5%E5%A4%87%E4%BB%BDdocker%E9%83%A8%E7%BD%B2%E7%9A%84gitlab%E6%9C%8D%E5%8A%A1%E7%9A%84%E6%9C%80%E7%AE%80%E5%8D%95%E6%96%B9%E6%A1%88/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/images/posts/%e6%af%8f%e6%97%a5%e5%a4%87%e4%bb%bddocker%e9%83%a8%e7%bd%b2%e7%9a%84gitlab%e6%9c%8d%e5%8a%a1%e7%9a%84%e6%9c%80%e7%ae%80%e5%8d%95%e6%96%b9%e6%a1%88/img.png" referrerpolicy="no-referrer">
            </div>每日备份docker部署的gitlab服务的最简单的方案 , 简单直接 gitlab的服务器每日执行下备份 另一台服务器每日从gitlab服务器rs]]></description>
</item><item>
    <title>保留最新n个文件的bash脚本</title>
    <link>https://mmfei.com/2021/06/%E4%BF%9D%E7%95%99%E6%9C%80%E6%96%B0n%E4%B8%AA%E6%96%87%E4%BB%B6%E7%9A%84bash%E8%84%9A%E6%9C%AC/</link>
    <pubDate>Tue, 29 Jun 2021 20:12:27 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://mmfei.com/2021/06/%E4%BF%9D%E7%95%99%E6%9C%80%E6%96%B0n%E4%B8%AA%E6%96%87%E4%BB%B6%E7%9A%84bash%E8%84%9A%E6%9C%AC/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/images/posts/%e4%bf%9d%e7%95%99%e6%9c%80%e6%96%b0n%e4%b8%aa%e6%96%87%e4%bb%b6%e7%9a%84bash%e8%84%9a%e6%9c%ac/img.png" referrerpolicy="no-referrer">
            </div>保留最新n个文件的bash脚本 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 #!/bin/sh usage() { echo &#34;Usage: $0dir&#34; echo &#34;Usage: $0dir save_number&#34; echo &#34;Usage: $0dir save_number keyword&#34; exit 1 } if [ $# -lt 1]]></description>
</item><item>
    <title>使用gitlab-ci自动部署php服务的openapi接口文档</title>
    <link>https://mmfei.com/2021/06/%E4%BD%BF%E7%94%A8gitlab-ci%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2php%E6%9C%8D%E5%8A%A1%E7%9A%84openapi%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3/</link>
    <pubDate>Tue, 22 Jun 2021 18:59:34 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://mmfei.com/2021/06/%E4%BD%BF%E7%94%A8gitlab-ci%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2php%E6%9C%8D%E5%8A%A1%E7%9A%84openapi%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/images/posts/%e4%bd%bf%e7%94%a8gitlab-ci%e8%87%aa%e5%8a%a8%e9%83%a8%e7%bd%b2php%e6%9c%8d%e5%8a%a1%e7%9a%84openapi%e6%8e%a5%e5%8f%a3%e6%96%87%e6%a1%a3/img.png" referrerpolicy="no-referrer">
            </div>前端后端交互流程 前后端频繁通过接口对接 , 维护一个真实的api文档是非常有必要的, 但是这也是一个繁重的工作. 如果你是使用 php(hyperf) + gitlab(托管]]></description>
</item></channel>
</rss>
