[{"categories":["openwrt","routes"],"content":" 找路由器型号的固件 (newifi d2: MediaTek MT7621AT) 刷breed (https://breed.hackpascal.net/) 刷官方openwrt (https://openwrt.org/toh/hwdata/d-team/d-team_newifi_d2) 为了后面方便使用 , 我直接保存一份我用的文件 (我用的是自定义固件,不是上面那个官方固件,管) ","date":"2021-08-01","objectID":"/2021/08/%E5%88%B7newif%E8%B7%AF%E7%94%B1%E5%99%A8%E5%86%B2%E6%B5%AA/:0:0","tags":["mt7621","openwrt","breed","newifi-d2","sysupgrade","v2ray"],"title":"刷newifi路由器冲浪","uri":"/2021/08/%E5%88%B7newif%E8%B7%AF%E7%94%B1%E5%99%A8%E5%86%B2%E6%B5%AA/"},{"categories":["openwrt","routes"],"content":"不死breed固件 upload/breed-mt7621-newifi-d2.bin ","date":"2021-08-01","objectID":"/2021/08/%E5%88%B7newif%E8%B7%AF%E7%94%B1%E5%99%A8%E5%86%B2%E6%B5%AA/:0:1","tags":["mt7621","openwrt","breed","newifi-d2","sysupgrade","v2ray"],"title":"刷newifi路由器冲浪","uri":"/2021/08/%E5%88%B7newif%E8%B7%AF%E7%94%B1%E5%99%A8%E5%86%B2%E6%B5%AA/"},{"categories":["openwrt","routes"],"content":"官方固件的内核版本太低了 , 用网友制作的升级包在管理后台升级下 upload/openwrt-ramips-mt7621-d-team_newifi-d2-squashfs-sysupgrade.bin ","date":"2021-08-01","objectID":"/2021/08/%E5%88%B7newif%E8%B7%AF%E7%94%B1%E5%99%A8%E5%86%B2%E6%B5%AA/:0:2","tags":["mt7621","openwrt","breed","newifi-d2","sysupgrade","v2ray"],"title":"刷newifi路由器冲浪","uri":"/2021/08/%E5%88%B7newif%E8%B7%AF%E7%94%B1%E5%99%A8%E5%86%B2%E6%B5%AA/"},{"categories":["openwrt","routes"],"content":"刷breed # 路由器开启了ssh登录 # breed 文件在 upload/breed-mt7621-newifi-d2.bin # 路由器ip假设为 192.168.1.1 # 上传breed固件到路由器的tmp目录 scp upload/breed-mt7621-newifi-d2.bin root@192.168.1.1:/tmp/ ssh root@192.168.1.1 insmod /tmp/breed-mt7621-newifi-d2.bin ; #ssh 之後應該會no response，這是正常的，因為newifi-d2-jail-breek.ko會停止其它系統功能強制寫入Breed bootloader到Flash，完成寫入後Router會自動重啟，所以等一下就好：D # 等路由器重启后 , 把路由器断电, 然后按住reset键 通电 , 成功的话会看到所有的led灯快闪4下. 然后连上路由器打开 http://192.168.1.1 进入 Breed Web Interface ","date":"2021-08-01","objectID":"/2021/08/%E5%88%B7newif%E8%B7%AF%E7%94%B1%E5%99%A8%E5%86%B2%E6%B5%AA/:1:0","tags":["mt7621","openwrt","breed","newifi-d2","sysupgrade","v2ray"],"title":"刷newifi路由器冲浪","uri":"/2021/08/%E5%88%B7newif%E8%B7%AF%E7%94%B1%E5%99%A8%E5%86%B2%E6%B5%AA/"},{"categories":["openwrt","routes"],"content":"刷openwrt 在breed后台 , 选 固件更新 , 使用 upload/openwrt-ramips-mt7621-d-team_newifi-d2-squashfs-sysupgrade.bin upload/openwrt-ramips-mt7621-d-team_newifi-d2-squashfs-sysupgrade.bin 这个固件里面已经有ssplus了 , 直接配置就好了. ","date":"2021-08-01","objectID":"/2021/08/%E5%88%B7newif%E8%B7%AF%E7%94%B1%E5%99%A8%E5%86%B2%E6%B5%AA/:2:0","tags":["mt7621","openwrt","breed","newifi-d2","sysupgrade","v2ray"],"title":"刷newifi路由器冲浪","uri":"/2021/08/%E5%88%B7newif%E8%B7%AF%E7%94%B1%E5%99%A8%E5%86%B2%E6%B5%AA/"},{"categories":["openwrt","routes"],"content":"冲浪 ","date":"2021-08-01","objectID":"/2021/08/%E5%88%B7newif%E8%B7%AF%E7%94%B1%E5%99%A8%E5%86%B2%E6%B5%AA/:3:0","tags":["mt7621","openwrt","breed","newifi-d2","sysupgrade","v2ray"],"title":"刷newifi路由器冲浪","uri":"/2021/08/%E5%88%B7newif%E8%B7%AF%E7%94%B1%E5%99%A8%E5%86%B2%E6%B5%AA/"},{"categories":["openwrt","routes"],"content":"自己搭建一个v2ray # 找个新加坡的机器 进入ssh, centos系统为例 wget https://git.io/v2rayinstall.sh; sh v2rayinstall.sh; # 选tcp模式 # 端口输入自己看着顺眼的 , 例如 10086 , 提示:如果是云厂商的ecs,可能需要开启下安全组对应的端口,以及注意下防火墙设置 # 不开启ss # 剩下就等它安装完毕 v2ray info ; # 看服务器配置 , 然后在openwrt的路由器后台配置好对应的ssplus+的v2ray的配置,注意协议,端口,uuid哈 ","date":"2021-08-01","objectID":"/2021/08/%E5%88%B7newif%E8%B7%AF%E7%94%B1%E5%99%A8%E5%86%B2%E6%B5%AA/:4:0","tags":["mt7621","openwrt","breed","newifi-d2","sysupgrade","v2ray"],"title":"刷newifi路由器冲浪","uri":"/2021/08/%E5%88%B7newif%E8%B7%AF%E7%94%B1%E5%99%A8%E5%86%B2%E6%B5%AA/"},{"categories":["docker","gitlab","backup","备份"],"content":" 每日备份docker部署的gitlab服务的最简单的方案 , 简单直接 gitlab的服务器每日执行下备份 另一台服务器每日从gitlab服务器rsync备份文件到本地(此服务器需要对gitlab服务器完成ssh免密登录) ","date":"2021-06-29","objectID":"/2021/06/%E6%AF%8F%E6%97%A5%E5%A4%87%E4%BB%BDdocker%E9%83%A8%E7%BD%B2%E7%9A%84gitlab%E6%9C%8D%E5%8A%A1%E7%9A%84%E6%9C%80%E7%AE%80%E5%8D%95%E6%96%B9%E6%A1%88/:0:0","tags":["docker","gitlab","backup","备份","rsync"],"title":"每日备份docker部署的gitlab服务的最简单方案","uri":"/2021/06/%E6%AF%8F%E6%97%A5%E5%A4%87%E4%BB%BDdocker%E9%83%A8%E7%BD%B2%E7%9A%84gitlab%E6%9C%8D%E5%8A%A1%E7%9A%84%E6%9C%80%E7%AE%80%E5%8D%95%E6%96%B9%E6%A1%88/"},{"categories":["docker","gitlab","backup","备份"],"content":"需要具备以下知识才能看懂 ssh免密登录 crontab定时服务 理解 gitlab服务器 和 备份服务器 的关系 了解docker 了解如何在服务器上修改一个文件 了解shell或者bash ","date":"2021-06-29","objectID":"/2021/06/%E6%AF%8F%E6%97%A5%E5%A4%87%E4%BB%BDdocker%E9%83%A8%E7%BD%B2%E7%9A%84gitlab%E6%9C%8D%E5%8A%A1%E7%9A%84%E6%9C%80%E7%AE%80%E5%8D%95%E6%96%B9%E6%A1%88/:0:1","tags":["docker","gitlab","backup","备份","rsync"],"title":"每日备份docker部署的gitlab服务的最简单方案","uri":"/2021/06/%E6%AF%8F%E6%97%A5%E5%A4%87%E4%BB%BDdocker%E9%83%A8%E7%BD%B2%E7%9A%84gitlab%E6%9C%8D%E5%8A%A1%E7%9A%84%E6%9C%80%E7%AE%80%E5%8D%95%E6%96%B9%E6%A1%88/"},{"categories":["docker","gitlab","backup","备份"],"content":"最终实现每日定期备份gitlab源码所有数据 每日3点1分 , gitlab服务器自动备份; 每日5点1分 , 备份机器自动去gitlab服务器同步备份文件 ","date":"2021-06-29","objectID":"/2021/06/%E6%AF%8F%E6%97%A5%E5%A4%87%E4%BB%BDdocker%E9%83%A8%E7%BD%B2%E7%9A%84gitlab%E6%9C%8D%E5%8A%A1%E7%9A%84%E6%9C%80%E7%AE%80%E5%8D%95%E6%96%B9%E6%A1%88/:1:0","tags":["docker","gitlab","backup","备份","rsync"],"title":"每日备份docker部署的gitlab服务的最简单方案","uri":"/2021/06/%E6%AF%8F%E6%97%A5%E5%A4%87%E4%BB%BDdocker%E9%83%A8%E7%BD%B2%E7%9A%84gitlab%E6%9C%8D%E5%8A%A1%E7%9A%84%E6%9C%80%E7%AE%80%E5%8D%95%E6%96%B9%E6%A1%88/"},{"categories":["docker","gitlab","backup","备份"],"content":"gitlab的服务器 在gitlab服务器上存放一个文件 `/data/src/script/backup_gitlab.sh` chmod +x /data/src/script/backup_gitlab.sh; # 需要给一个执行权限 ","date":"2021-06-29","objectID":"/2021/06/%E6%AF%8F%E6%97%A5%E5%A4%87%E4%BB%BDdocker%E9%83%A8%E7%BD%B2%E7%9A%84gitlab%E6%9C%8D%E5%8A%A1%E7%9A%84%E6%9C%80%E7%AE%80%E5%8D%95%E6%96%B9%E6%A1%88/:2:0","tags":["docker","gitlab","backup","备份","rsync"],"title":"每日备份docker部署的gitlab服务的最简单方案","uri":"/2021/06/%E6%AF%8F%E6%97%A5%E5%A4%87%E4%BB%BDdocker%E9%83%A8%E7%BD%B2%E7%9A%84gitlab%E6%9C%8D%E5%8A%A1%E7%9A%84%E6%9C%80%E7%AE%80%E5%8D%95%E6%96%B9%E6%A1%88/"},{"categories":["docker","gitlab","backup","备份"],"content":"/data/src/script/backup_gitlab.sh #!/bin/sh # 此脚本完成 # 1. 立刻备份gitlab项目 (会在backup生成一个备份包) # 2. 指定目录 下 backup 文件只保留最新的5份 dir=\"/data/backups\" # gitlab备份所在的目录 , 需要docker -v /data/backups:/var/opt/gitlab/backups:rw 挂载好 save_number=\"5\" # 备份只留最新5份 keyword=\"backup\" # 过滤关键字,防止目录有混淆其他文件删错了 docker exec -t gitlab gitlab-rake gitlab:backup:create # 这里要注意去掉-i,否则备份不成功 cd $dir save_file=`ls -lrt | grep \"$keyword\" | tail -$save_number | awk '{print $NF}'` ls | grep \"$keyword\" | grep -v \"$save_file\" | xargs rm -rf echo \"finish!\" 在gitlab服务器配好定时器crontab (命令: crontab -e 能直接编辑) ","date":"2021-06-29","objectID":"/2021/06/%E6%AF%8F%E6%97%A5%E5%A4%87%E4%BB%BDdocker%E9%83%A8%E7%BD%B2%E7%9A%84gitlab%E6%9C%8D%E5%8A%A1%E7%9A%84%E6%9C%80%E7%AE%80%E5%8D%95%E6%96%B9%E6%A1%88/:2:1","tags":["docker","gitlab","backup","备份","rsync"],"title":"每日备份docker部署的gitlab服务的最简单方案","uri":"/2021/06/%E6%AF%8F%E6%97%A5%E5%A4%87%E4%BB%BDdocker%E9%83%A8%E7%BD%B2%E7%9A%84gitlab%E6%9C%8D%E5%8A%A1%E7%9A%84%E6%9C%80%E7%AE%80%E5%8D%95%E6%96%B9%E6%A1%88/"},{"categories":["docker","gitlab","backup","备份"],"content":"crontab # 每日三点零1分开始备份 1 3 * * * /data/src/script/backup_gitlab.sh \u003e \"/data/logs/gitlab_backups/gitlab.backup.$(date +\"\\%Y-\\%m-\\%d+\\%T\").log\" 2\u003e\u00261 ","date":"2021-06-29","objectID":"/2021/06/%E6%AF%8F%E6%97%A5%E5%A4%87%E4%BB%BDdocker%E9%83%A8%E7%BD%B2%E7%9A%84gitlab%E6%9C%8D%E5%8A%A1%E7%9A%84%E6%9C%80%E7%AE%80%E5%8D%95%E6%96%B9%E6%A1%88/:2:2","tags":["docker","gitlab","backup","备份","rsync"],"title":"每日备份docker部署的gitlab服务的最简单方案","uri":"/2021/06/%E6%AF%8F%E6%97%A5%E5%A4%87%E4%BB%BDdocker%E9%83%A8%E7%BD%B2%E7%9A%84gitlab%E6%9C%8D%E5%8A%A1%E7%9A%84%E6%9C%80%E7%AE%80%E5%8D%95%E6%96%B9%E6%A1%88/"},{"categories":["docker","gitlab","backup","备份"],"content":"备份数据的机器 在备份机存放以下脚本 /data/src/script/pull_gitlab_backup.sh ","date":"2021-06-29","objectID":"/2021/06/%E6%AF%8F%E6%97%A5%E5%A4%87%E4%BB%BDdocker%E9%83%A8%E7%BD%B2%E7%9A%84gitlab%E6%9C%8D%E5%8A%A1%E7%9A%84%E6%9C%80%E7%AE%80%E5%8D%95%E6%96%B9%E6%A1%88/:3:0","tags":["docker","gitlab","backup","备份","rsync"],"title":"每日备份docker部署的gitlab服务的最简单方案","uri":"/2021/06/%E6%AF%8F%E6%97%A5%E5%A4%87%E4%BB%BDdocker%E9%83%A8%E7%BD%B2%E7%9A%84gitlab%E6%9C%8D%E5%8A%A1%E7%9A%84%E6%9C%80%E7%AE%80%E5%8D%95%E6%96%B9%E6%A1%88/"},{"categories":["docker","gitlab","backup","备份"],"content":"/data/src/script/pull_gitlab_backup.sh # 注意: 备份服务器 需要提前完成对 gitlab服务器的 免密登录 local_backup_dir=\"/data/gitlab_backups/\" #本地gitlab备份文件存放的位置 gitlab_server_host=\"ip\" #gitlab服务器的ip gitlab_server_ssh_port=\"22\" #gitlab服务器的ssh的端口 gitlab_backup_dir_in_server=\"/data/backups/\" #gitlab服务器上的备份目录\"/\"结尾 # 开始同步服务器的备份文件下来 rsync -avz -e \"ssh -P $gitlab_server_ssh_port\" root@$gitlab_server_host:$gitlab_backup_dir_in_server $local_backup_dir # 删除多余的备份文件 , 只保留最新五份 save_number=\"5\" # 备份只留最新5份 keyword=\"backup\" # 过滤关键字,防止目录有混淆其他文件删错了 cd $local_backup_dir save_file=`ls -lrt | grep \"$keyword\" | tail -$save_number | awk '{print $NF}'` ls | grep \"$keyword\" | grep -v \"$save_file\" | xargs rm -rf echo 'finished'; ","date":"2021-06-29","objectID":"/2021/06/%E6%AF%8F%E6%97%A5%E5%A4%87%E4%BB%BDdocker%E9%83%A8%E7%BD%B2%E7%9A%84gitlab%E6%9C%8D%E5%8A%A1%E7%9A%84%E6%9C%80%E7%AE%80%E5%8D%95%E6%96%B9%E6%A1%88/:3:1","tags":["docker","gitlab","backup","备份","rsync"],"title":"每日备份docker部署的gitlab服务的最简单方案","uri":"/2021/06/%E6%AF%8F%E6%97%A5%E5%A4%87%E4%BB%BDdocker%E9%83%A8%E7%BD%B2%E7%9A%84gitlab%E6%9C%8D%E5%8A%A1%E7%9A%84%E6%9C%80%E7%AE%80%E5%8D%95%E6%96%B9%E6%A1%88/"},{"categories":["docker","gitlab","backup","备份"],"content":"在备份机配好定时器 在备份数据的机器配好定时器crontab (命令: crontab -e 能直接编辑) # 每日五点零1分开始备份 (预计2小时内服务器已经完成备份) 1 3 * * * /data/src/script/pull_gitlab_backup.sh \u003e \"/data/logs/gitlab_backups/gitlab.backup.$(date +\"\\%Y-\\%m-\\%d+\\%T\").log\" 2\u003e\u00261 ","date":"2021-06-29","objectID":"/2021/06/%E6%AF%8F%E6%97%A5%E5%A4%87%E4%BB%BDdocker%E9%83%A8%E7%BD%B2%E7%9A%84gitlab%E6%9C%8D%E5%8A%A1%E7%9A%84%E6%9C%80%E7%AE%80%E5%8D%95%E6%96%B9%E6%A1%88/:3:2","tags":["docker","gitlab","backup","备份","rsync"],"title":"每日备份docker部署的gitlab服务的最简单方案","uri":"/2021/06/%E6%AF%8F%E6%97%A5%E5%A4%87%E4%BB%BDdocker%E9%83%A8%E7%BD%B2%E7%9A%84gitlab%E6%9C%8D%E5%8A%A1%E7%9A%84%E6%9C%80%E7%AE%80%E5%8D%95%E6%96%B9%E6%A1%88/"},{"categories":["docker","gitlab","backup","备份"],"content":"可以给备份数据的机器 设置免密登录 # file ~/.ssh/config #Host gitlab_server_demo # HostName gitlab服务器的公网ip # Port gitlab服务器的ssh的端口,一般是22 # User gitlab服务器ssh登录账号,一般是root(更建议是低权的账号) # IdentityFile 私钥文件(一般是:~/.ssh/id_rsa) # 以下配置需要把 `cat ~/.ssh/id_rsa.pub` 的内容追加到 gitlab服务器的 ~/.ssh/authorized_keys # 在备份服务执行 ssh gitlab_server 如果正常是可以免密登录了 Host gitlab_server HostName 8.8.8.8 Port 8888 User root IdentityFile ~/.ssh/id_rsa ","date":"2021-06-29","objectID":"/2021/06/%E6%AF%8F%E6%97%A5%E5%A4%87%E4%BB%BDdocker%E9%83%A8%E7%BD%B2%E7%9A%84gitlab%E6%9C%8D%E5%8A%A1%E7%9A%84%E6%9C%80%E7%AE%80%E5%8D%95%E6%96%B9%E6%A1%88/:3:3","tags":["docker","gitlab","backup","备份","rsync"],"title":"每日备份docker部署的gitlab服务的最简单方案","uri":"/2021/06/%E6%AF%8F%E6%97%A5%E5%A4%87%E4%BB%BDdocker%E9%83%A8%E7%BD%B2%E7%9A%84gitlab%E6%9C%8D%E5%8A%A1%E7%9A%84%E6%9C%80%E7%AE%80%E5%8D%95%E6%96%B9%E6%A1%88/"},{"categories":["shell","backup","bash","script","脚本"],"content":" 保留最新n个文件的bash脚本 #!/bin/sh usage() { echo \"Usage: $0dir\" echo \"Usage: $0dir save_number\" echo \"Usage: $0dir save_number keyword\" exit 1 } if [ $# -lt 1 ] ; then usage fi dir=\"$1\" save_number=\"$2\" keyword=\"$3\" if [[ -z \"$save_number\" ]]; then save_number=5 fi if [[ \"$keyword\" == '' ]]; then keyword='' fi cd $dir if [[ \"$keyword\" == '' ]]; then echo \"save_file=`ls -lrt | tail -$save_number| awk '{print $NF}'`\" save_file=`ls -lrt | tail -$save_number | awk '{print $NF}'` echo $save_file ls | grep -v \"$save_file\" | xargs rm -rf else save_file=`ls -lrt | grep \"$keyword\" | tail -$save_number | awk '{print $NF}'` echo $save_file ls | grep \"$keyword\" | grep -v \"$save_file\" | xargs rm -rf fi echo \"finish!\" ","date":"2021-06-29","objectID":"/2021/06/%E4%BF%9D%E7%95%99%E6%9C%80%E6%96%B0n%E4%B8%AA%E6%96%87%E4%BB%B6%E7%9A%84bash%E8%84%9A%E6%9C%AC/:0:0","tags":["shell","backup","bash","script","脚本"],"title":"保留最新n个文件的bash脚本","uri":"/2021/06/%E4%BF%9D%E7%95%99%E6%9C%80%E6%96%B0n%E4%B8%AA%E6%96%87%E4%BB%B6%E7%9A%84bash%E8%84%9A%E6%9C%AC/"},{"categories":["openapi","postman","swagger","gitlab","gitlab-ci","hyperf"],"content":"前端后端交互流程 前后端频繁通过接口对接 , 维护一个真实的api文档是非常有必要的, 但是这也是一个繁重的工作. 如果你是使用 php(hyperf) + gitlab(托管源码) , 那么此文适合你 这是打造一套自动化文档系统部署的方案 (swagger-ui + openapi + php[hyperf] + nginx + gitlab-ci) ","date":"2021-06-22","objectID":"/2021/06/%E4%BD%BF%E7%94%A8gitlab-ci%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2php%E6%9C%8D%E5%8A%A1%E7%9A%84openapi%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3/:0:1","tags":["openapi","postman","swagger","gitlab-ci","hyperf"],"title":"使用gitlab-ci自动部署php服务的openapi接口文档","uri":"/2021/06/%E4%BD%BF%E7%94%A8gitlab-ci%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2php%E6%9C%8D%E5%8A%A1%E7%9A%84openapi%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3/"},{"categories":["openapi","postman","swagger","gitlab","gitlab-ci","hyperf"],"content":"hyperf增加配置 composer require --dev hyperf/swagger php ./bin/hyperf.php gen:command SwaggerCommand php ./bin/hyperf.php swagger:gen ","date":"2021-06-22","objectID":"/2021/06/%E4%BD%BF%E7%94%A8gitlab-ci%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2php%E6%9C%8D%E5%8A%A1%E7%9A%84openapi%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3/:0:2","tags":["openapi","postman","swagger","gitlab-ci","hyperf"],"title":"使用gitlab-ci自动部署php服务的openapi接口文档","uri":"/2021/06/%E4%BD%BF%E7%94%A8gitlab-ci%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2php%E6%9C%8D%E5%8A%A1%E7%9A%84openapi%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3/"},{"categories":["openapi","postman","swagger","gitlab","gitlab-ci","hyperf"],"content":"搭建swagger-editor (本地使用) git clone https://github.com/swagger-api/swagger-editor; cd swagger-editor npm install npm start ","date":"2021-06-22","objectID":"/2021/06/%E4%BD%BF%E7%94%A8gitlab-ci%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2php%E6%9C%8D%E5%8A%A1%E7%9A%84openapi%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3/:0:3","tags":["openapi","postman","swagger","gitlab-ci","hyperf"],"title":"使用gitlab-ci自动部署php服务的openapi接口文档","uri":"/2021/06/%E4%BD%BF%E7%94%A8gitlab-ci%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2php%E6%9C%8D%E5%8A%A1%E7%9A%84openapi%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3/"},{"categories":["openapi","postman","swagger","gitlab","gitlab-ci","hyperf"],"content":"搭建swagger-ui (可以部署到内网环境 , 没做账号密码保护 , 属于公开的!) cd /www git clone https://github.com/swagger-api/swagger-ui; # 修改dist的读取的json配置的文件 sed -i 's#https://petstore.swagger.io/v2/swagger.json#openapi-doc.yaml#' dist/index.html nginx配置 # 请替换对应的域名 swagger-ui.doc.com 和 路径 /www/swagger-ui server { listen 80; server_name swagger-ui.doc.com; error_page 500 502 503 504 /50x.html; root /www/swagger-ui/dist; index index.html index.htm; access_log /data/nginx/swagger-ui/access_$logdate.log; error_log /data/nginx/swagger-ui/error.log; # return 301 https://$server_name$request_uri; location / { charset off; try_files $uri $uri/ /index.html; } } server { listen 443 ssl; server_name swagger-ui; error_page 500 502 503 504 /50x.html; root /www/swagger-ui/dist; index index.html index.htm; access_log /data/nginx/swagger-ui/access_$logdate.log; error_log /data/nginx/swagger-ui/error.log; ssl_session_cache shared:SSL:1m; ssl_certificate pem/abc.com/cert.pem; # pem文件的路径 ssl_certificate_key pem/abc.com/key.pem; # key文件的路径 ssl_session_timeout 5m; #缓存有效期 ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4; #加密算法 ssl_protocols TLSv1 TLSv1.1 TLSv1.2; #安全链接可选的加密协议 ssl_prefer_server_ciphers on; #使用服务器端的首选算法 location / { charset off; try_files $uri $uri/ /index.html; } } ","date":"2021-06-22","objectID":"/2021/06/%E4%BD%BF%E7%94%A8gitlab-ci%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2php%E6%9C%8D%E5%8A%A1%E7%9A%84openapi%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3/:0:4","tags":["openapi","postman","swagger","gitlab-ci","hyperf"],"title":"使用gitlab-ci自动部署php服务的openapi接口文档","uri":"/2021/06/%E4%BD%BF%E7%94%A8gitlab-ci%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2php%E6%9C%8D%E5%8A%A1%E7%9A%84openapi%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3/"},{"categories":["openapi","postman","swagger","gitlab","gitlab-ci","hyperf"],"content":"配置gitlab自动打包文档到项目 配置gitlab-ci.yml # 这个例子是当test分支有任何提交 , 会自动生成openapi-doc.yaml , 并复制到 /www/dist/openapi-doc.yaml# $SWAGGER_API_JSON_FILE_NAME 生成的api的文件名字 , 如: openapi-doc.yaml# $SWAGGER_ROOT_DIST_PATH swagger-ui的dist所在目录, 如: /www/dist/stages:- buildApibuild_test_api:stage:buildApiscript:- |echo \"git checkout ${CI_COMMIT_REF_NAME} --\"; git checkout ${CI_COMMIT_REF_NAME} -- git pull if [[ \"$WEB_ROOT_PATH\" == \"\" ]]; then echo \"EMPTY VAR WEB_ROOT_PATH\"; else composer install php ./bin/hyperf.php swagger:gen cp $SWAGGER_API_JSON_FILE_NAME $SWAGGER_ROOT_DIST_PATH fionly:- testtags:- build ","date":"2021-06-22","objectID":"/2021/06/%E4%BD%BF%E7%94%A8gitlab-ci%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2php%E6%9C%8D%E5%8A%A1%E7%9A%84openapi%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3/:0:5","tags":["openapi","postman","swagger","gitlab-ci","hyperf"],"title":"使用gitlab-ci自动部署php服务的openapi接口文档","uri":"/2021/06/%E4%BD%BF%E7%94%A8gitlab-ci%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2php%E6%9C%8D%E5%8A%A1%E7%9A%84openapi%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3/"},{"categories":["openapi","postman","swagger","gitlab","gitlab-ci","hyperf"],"content":"如何在hyperf框架下配好一个swagger文档基本信息(新增一个文件app/Utils/SwaggerUtil.php) \u003c?php declare(strict_types=1); /** * This file is part of mydomain. * 这个例子支持传递一个token=?的检验参数作为账号识别 * * @link https://mydomain.com * @document https://doc.mydomain.com * @contact it@mydomain.com */ namespace App\\Utils; use OpenApi\\Annotations as OA; /** * 文档生成器注解. * * @OA\\Info(title=\"mydomain\", version=\"0.1\") * @OA\\Server(url=\"https://api.mydomain.com\", description=\"正式环境(慎用)[https]\") * @OA\\Server(url=\"http://127.0.0.1:9601\", description=\"开发环境(本地)\") * @OA\\SecurityScheme( * securityScheme=\"tpToken\", * type=\"apiKey\", * in=\"query\", * name=\"token\" * ) * @OA\\Schema( * schema=\"ApiSuccessResponse\", * type=\"object\", * description=\"{\"\"code\"\": 200,\"\"data\"\": {},\"\"msg\"\": \"\"\"\",\"\"time\"\": 1624432870}\", * properties={ * @OA\\Property( * type=\"integer\", * property=\"code\", * description=\"code\", * example=\"200\" * ), * @OA\\Property( * type=\"object\", * property=\"data\", * description=\"data\", * example=\"{}\" * ), * @OA\\Property( * type=\"string\", * property=\"msg\", * description=\"msg\", * example=\"\" * ), * @OA\\Property( * type=\"integer\", * property=\"time\", * description=\"current timestamp\", * example=\"1624500732\" * ) * } * ) * @OA\\Schema( * schema=\"ApiFaile500Response\", * type=\"object\", * description=\"{\"\"code\"\": 0,\"\"data\"\": {},\"\"msg\"\": \"\"???\"\",\"\"time\"\": 1624432870}\", * properties={ * @OA\\Property( * type=\"integer\", * property=\"code\", * description=\"code\", * example=\"500\" * ), * @OA\\Property( * type=\"object\", * property=\"data\", * description=\"data\", * example=\"{}\" * ), * @OA\\Property( * type=\"string\", * property=\"msg\", * description=\"msg\", * example=\"Illegal string offset '?'\" * ), * @OA\\Property( * type=\"integer\", * property=\"time\", * description=\"current timestamp\", * example=\"1624500732\" * ) * } * ) */ class SwaggerUtil { } ","date":"2021-06-22","objectID":"/2021/06/%E4%BD%BF%E7%94%A8gitlab-ci%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2php%E6%9C%8D%E5%8A%A1%E7%9A%84openapi%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3/:0:6","tags":["openapi","postman","swagger","gitlab-ci","hyperf"],"title":"使用gitlab-ci自动部署php服务的openapi接口文档","uri":"/2021/06/%E4%BD%BF%E7%94%A8gitlab-ci%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2php%E6%9C%8D%E5%8A%A1%E7%9A%84openapi%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3/"},{"categories":["openapi","postman","swagger","gitlab","gitlab-ci","hyperf"],"content":"如何写一个文档注释 /** * * @OA\\Get( * path=\"/users\", * operationId=\"getListOfUsers\", * tags={\"Users\"}, * description=\"Get list of users\", * security={{\"Authorization-Bearer\":{}}}, * @OA\\Parameter( * name=\"Authorization\", * in=\"header\", * required=true, * description=\"Bearer {access-token}\", * @OA\\Schema( * type=\"bearerAuth\" * ) * ), * @OA\\Response( * response=200, * description=\"Get list of users.\", * @OA\\JsonContent(type=\"object\", * @OA\\Property(property=\"message\", type=\"string\"), * @OA\\Property(property=\"data\", type=\"array\", * @OA\\Items(type=\"object\", * @OA\\Property(property=\"id\", type=\"integer\"), * @OA\\Property(property=\"name\", type=\"string\"), * @OA\\Property(property=\"email\", type=\"string\"), * ), * ), * ), * ), * @OA\\Response(response=401, description=\"Unauthorized\"), * @OA\\Response(response=404, description=\"Not Found\"), * ) * * * * @OA\\Post( * path=\"/api/login\", * tags={\"手机验证码登录\"}, * summary=\"手机验证码登录\", * description=\"用户登录（手机号+验证码）\", * * @OA\\Parameter(ref=\"#/components/parameters/authToken\"),//这里引入了authToken参数 * @OA\\RequestBody( * @OA\\MediaType( * *mediaType=\"application/json\", * mediaType=\"application/x-www-form-urlencoded\", * @OA\\Schema(ref=\"#/components/schemas/MobileLogin\") //这里引入了手机验证码登录属性模板 * ) * ), * @OA\\Response( * response=200, * description=\"successful operation\", * @OA\\JsonContent( * ref=\"#/components/schemas/MsgExport\",//这里引入了公共响应模板 * example={\"code\":0,\"reason\":\"接口响应消息\",\"result\":{\"status\":1},\"params\":{}}, * ) * ), * * ) * 如果有多个参数的话且复用度较高，可以独立设置params，然后引用 * @OA\\Parameter( * in=\"header\", * name=\"authToken\", * description=\"测试HeaderToken\", * required=true, * @OA\\Schema( * type=\"string\" * ) * ), */ 官方文档: https://swagger.io/specification/ 中文文档: https://www.sdk.cn/details/9pPQD6wqK09L8ozvNy#title-5 ","date":"2021-06-22","objectID":"/2021/06/%E4%BD%BF%E7%94%A8gitlab-ci%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2php%E6%9C%8D%E5%8A%A1%E7%9A%84openapi%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3/:0:7","tags":["openapi","postman","swagger","gitlab-ci","hyperf"],"title":"使用gitlab-ci自动部署php服务的openapi接口文档","uri":"/2021/06/%E4%BD%BF%E7%94%A8gitlab-ci%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2php%E6%9C%8D%E5%8A%A1%E7%9A%84openapi%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3/"},{"categories":["openapi","postman","swagger","gitlab","gitlab-ci","hyperf"],"content":"postman导出openapi文档的工具 https://apitransform.com/convert/ ","date":"2021-06-22","objectID":"/2021/06/%E4%BD%BF%E7%94%A8gitlab-ci%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2php%E6%9C%8D%E5%8A%A1%E7%9A%84openapi%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3/:0:8","tags":["openapi","postman","swagger","gitlab-ci","hyperf"],"title":"使用gitlab-ci自动部署php服务的openapi接口文档","uri":"/2021/06/%E4%BD%BF%E7%94%A8gitlab-ci%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2php%E6%9C%8D%E5%8A%A1%E7%9A%84openapi%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3/"},{"categories":["vscode","xdebug","docker","php","debug"],"content":"https://github.com/oh-my-docker-hub/oh-my-docker/blob/master/build/php7/README.php7.md ","date":"2021-06-22","objectID":"/2021/06/%E5%A6%82%E4%BD%95%E5%9C%A8vscode%E7%BC%96%E8%BE%91%E5%99%A8%E4%B8%AD%E9%80%9A%E8%BF%87xdebug%E8%B0%83%E8%AF%95%E5%9C%A8docker%E7%9A%84%E8%BF%90%E8%A1%8C%E7%9A%84%E6%9C%8D%E5%8A%A1/:0:0","tags":["vscode","xdebug","docker","debug","php"],"title":"如何在vscode编辑器中通过xdebug调试在docker的运行的服务","uri":"/2021/06/%E5%A6%82%E4%BD%95%E5%9C%A8vscode%E7%BC%96%E8%BE%91%E5%99%A8%E4%B8%AD%E9%80%9A%E8%BF%87xdebug%E8%B0%83%E8%AF%95%E5%9C%A8docker%E7%9A%84%E8%BF%90%E8%A1%8C%E7%9A%84%E6%9C%8D%E5%8A%A1/"},{"categories":["vscode","xdebug","docker","php","debug"],"content":"docker hub : omydockerhub/php7 如何Debug容器里面运行的php服务 ","date":"2021-06-22","objectID":"/2021/06/%E5%A6%82%E4%BD%95%E5%9C%A8vscode%E7%BC%96%E8%BE%91%E5%99%A8%E4%B8%AD%E9%80%9A%E8%BF%87xdebug%E8%B0%83%E8%AF%95%E5%9C%A8docker%E7%9A%84%E8%BF%90%E8%A1%8C%E7%9A%84%E6%9C%8D%E5%8A%A1/:1:0","tags":["vscode","xdebug","docker","debug","php"],"title":"如何在vscode编辑器中通过xdebug调试在docker的运行的服务","uri":"/2021/06/%E5%A6%82%E4%BD%95%E5%9C%A8vscode%E7%BC%96%E8%BE%91%E5%99%A8%E4%B8%AD%E9%80%9A%E8%BF%87xdebug%E8%B0%83%E8%AF%95%E5%9C%A8docker%E7%9A%84%E8%BF%90%E8%A1%8C%E7%9A%84%E6%9C%8D%E5%8A%A1/"},{"categories":["vscode","xdebug","docker","php","debug"],"content":"配置好xdebug ; conf/conf.d/docker-php-ext-xdebug.ini ; 此文件映射到 /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini [XDebug] xdebug.default_enable=1 xdebug.remote_enable=1 xdebug.remote_port=19900;xdebug的远程端口 xdebug.remote_handler=dbgp; xdebug.remote_connect_back=0 xdebug.remote_host=192.168.0.105 ; 你本机的IP地址(内网,不是公网) xdebug.idekey=VSCODE xdebug.remote_autostart=1 xdebug.remote_log=/data1/logs/xdebug/remote.log ;xdebug的日志输出地址，可加可不加 vscode 配置 xdebug 在 docker 里面调试php (vscode 要安装 php debug插件 , 下面是vscode 调试的配置) { // Use IntelliSense to learn about possible attributes. // Hover to view descriptions of existing attributes. // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387 \"version\": \"0.2.0\", \"configurations\": [ { \"name\": \"Listen for XDebug\", \"type\": \"php\", \"request\": \"launch\", \"port\": 19900, // 对应 XDebug 的配置 \"stopOnEntry\": true, \"pathMappings\": { // \"容器中对应的项目地址\": \"本机项目地址\" // 绝对路径 \"${workspaceRoot}\": \"${workspaceRoot}\" } }, { \"name\": \"Launch currently open script\", \"type\": \"php\", \"request\": \"launch\", \"program\": \"${file}\", \"cwd\": \"${fileDirname}\", \"port\": 9090 } ] } ","date":"2021-06-22","objectID":"/2021/06/%E5%A6%82%E4%BD%95%E5%9C%A8vscode%E7%BC%96%E8%BE%91%E5%99%A8%E4%B8%AD%E9%80%9A%E8%BF%87xdebug%E8%B0%83%E8%AF%95%E5%9C%A8docker%E7%9A%84%E8%BF%90%E8%A1%8C%E7%9A%84%E6%9C%8D%E5%8A%A1/:2:0","tags":["vscode","xdebug","docker","debug","php"],"title":"如何在vscode编辑器中通过xdebug调试在docker的运行的服务","uri":"/2021/06/%E5%A6%82%E4%BD%95%E5%9C%A8vscode%E7%BC%96%E8%BE%91%E5%99%A8%E4%B8%AD%E9%80%9A%E8%BF%87xdebug%E8%B0%83%E8%AF%95%E5%9C%A8docker%E7%9A%84%E8%BF%90%E8%A1%8C%E7%9A%84%E6%9C%8D%E5%8A%A1/"},{"categories":["vscode","xdebug","docker","php","debug"],"content":"然后可以调试了 在vscode先点击debug按钮 , 此时vscode已经告知docker里面的php的xdebug服务 , 此刻开始调试 在浏览器打开一个url 或者 在vscode里面 直接运行一个文件 此时就可以看到效果 (最好设置个断点 , 比较方便看到效果) ","date":"2021-06-22","objectID":"/2021/06/%E5%A6%82%E4%BD%95%E5%9C%A8vscode%E7%BC%96%E8%BE%91%E5%99%A8%E4%B8%AD%E9%80%9A%E8%BF%87xdebug%E8%B0%83%E8%AF%95%E5%9C%A8docker%E7%9A%84%E8%BF%90%E8%A1%8C%E7%9A%84%E6%9C%8D%E5%8A%A1/:3:0","tags":["vscode","xdebug","docker","debug","php"],"title":"如何在vscode编辑器中通过xdebug调试在docker的运行的服务","uri":"/2021/06/%E5%A6%82%E4%BD%95%E5%9C%A8vscode%E7%BC%96%E8%BE%91%E5%99%A8%E4%B8%AD%E9%80%9A%E8%BF%87xdebug%E8%B0%83%E8%AF%95%E5%9C%A8docker%E7%9A%84%E8%BF%90%E8%A1%8C%E7%9A%84%E6%9C%8D%E5%8A%A1/"},{"categories":["mac","grpc","php"],"content":" pecl install grpc pecl install protobuf php -m | grep grpc php -m | grep protobuf ","date":"2021-06-22","objectID":"/2021/06/mac%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85grpc%E7%9A%84php%E5%AE%A2%E6%88%B7%E7%AB%AF/:0:0","tags":["mac","grpc","php"],"title":"Mac环境安装grpc的php客户端","uri":"/2021/06/mac%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85grpc%E7%9A%84php%E5%AE%A2%E6%88%B7%E7%AB%AF/"},{"categories":["mac","grpc","php"],"content":"安装超好用的grpc客户端EVANS https://github.com/ktr0731/evans ","date":"2021-06-22","objectID":"/2021/06/mac%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85grpc%E7%9A%84php%E5%AE%A2%E6%88%B7%E7%AB%AF/:1:0","tags":["mac","grpc","php"],"title":"Mac环境安装grpc的php客户端","uri":"/2021/06/mac%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85grpc%E7%9A%84php%E5%AE%A2%E6%88%B7%E7%AB%AF/"},{"categories":["mac","grpc","php"],"content":"安装 brew tap ktr0731/evans brew install evans ","date":"2021-06-22","objectID":"/2021/06/mac%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85grpc%E7%9A%84php%E5%AE%A2%E6%88%B7%E7%AB%AF/:1:1","tags":["mac","grpc","php"],"title":"Mac环境安装grpc的php客户端","uri":"/2021/06/mac%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85grpc%E7%9A%84php%E5%AE%A2%E6%88%B7%E7%AB%AF/"},{"categories":["Linux","bash"],"content":"在shell输入一个命令后 , 可以通过上下方向箭头翻出最近的历史记录. 这么好用的功能,为啥不内置呢0.0…. cat \u003e\u003e ~/.inputrc \u003c\u003c'EOF' \"\\e[A\": history-search-backward \"\\e[B\": history-search-forward EOF ","date":"2021-06-08","objectID":"/2021/06/linux%E6%A0%B9%E6%8D%AE%E5%8E%86%E5%8F%B2%E8%AE%B0%E5%BD%95%E8%A1%A5%E5%85%A8bash%E5%91%BD%E4%BB%A4autocomplete/:0:0","tags":["linux","bash","autocomplete","history","shell"],"title":"Linux根据历史记录补全bash命令autocomplete","uri":"/2021/06/linux%E6%A0%B9%E6%8D%AE%E5%8E%86%E5%8F%B2%E8%AE%B0%E5%BD%95%E8%A1%A5%E5%85%A8bash%E5%91%BD%E4%BB%A4autocomplete/"},{"categories":["nginx","ssl","https"],"content":"server { listen 80; server_name api.dev.com; error_page 500 502 503 504 /50x.html; error_log /data/nginx/api.dev.com/error.log; access_log /data/nginx/api.dev.com/access_$logdate.log; #root /mnt/d/wsl/www/playsmart/; index index.html index.htm index.php; location = / { proxy_set_header X-Real-IP $remote_addr; proxy_set_header Host $http_host; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_http_version 1.1; proxy_set_header Connection keep-alive; proxy_cookie_path / \"/; secure; HttpOnly; SameSite=strict\"; proxy_pass http://127.0.0.1:8080; } location / { proxy_set_header X-Real-IP $remote_addr; proxy_set_header Host $http_host; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_http_version 1.1; proxy_set_header Connection keep-alive; proxy_cookie_path / \"/; secure; HttpOnly; SameSite=strict\"; if (!-e $request_filename) { proxy_pass http://127.0.0.1:8080; } } location = /50x.html { root /usr/share/nginx/html; } } server { listen 443 ssl; server_name api.dev.com; error_page 500 502 503 504 /50x.html; index index.html index.htm; access_log /data/nginx/api.dev.com/access_$logdate.log; error_log /data/nginx/api.dev.com/error.log; ssl_session_cache shared:SSL:1m; ssl_certificate pem/api.dev.com/cert.pem; # pem文件的路径 ssl_certificate_key pem/api.dev.com/key.pem; # key文件的路径 ssl_session_timeout 5m; #缓存有效期 ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4; #加密算法 ssl_protocols TLSv1 TLSv1.1 TLSv1.2; #安全链接可选的加密协议 ssl_prefer_server_ciphers on; #使用服务器端的首选算法 location = / { proxy_set_header X-Real-IP $remote_addr; proxy_set_header Host api.dev.com; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_http_version 1.1; proxy_set_header Connection keep-alive; proxy_cookie_path / \"/; secure; HttpOnly; SameSite=strict\"; proxy_pass http://127.0.0.1:8080; } location / { proxy_set_header X-Real-IP $remote_addr; proxy_set_header Host api.dev.com; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_http_version 1.1; proxy_set_header Connection keep-alive; proxy_cookie_path / \"/; secure; HttpOnly; SameSite=strict\"; if (!-e $request_filename) { proxy_pass http://127.0.0.1:8080; } } location = /50x.html { root /usr/share/nginx/html; } } ","date":"2021-06-05","objectID":"/2021/06/%E6%80%8E%E6%A0%B7%E8%AE%A9nginx%E7%9A%84%E9%85%8D%E7%BD%AE%E6%94%AF%E6%8C%81https/:0:0","tags":["nginx","https"],"title":"怎样让nginx的配置支持https","uri":"/2021/06/%E6%80%8E%E6%A0%B7%E8%AE%A9nginx%E7%9A%84%E9%85%8D%E7%BD%AE%E6%94%AF%E6%8C%81https/"},{"categories":["php","composer","github","hyperf"],"content":"准备下环境 # 在github创建一个仓库 , 并clone到本地 # 计划 在 your_component 文件夹开发 your_component/your_component 包 composer create-project hyperf/hyperf-skeleton # 主项目 , 它会使用下面那个自建的组件 composer create-project hyperf/component-creater your_component dev-master # 自建的组件项目 cd hyperf-skeleton composer config repositories '[{\"name\": \"your_component/your_component\", \"type\": \"path\", \"url\": \"../your_component/src/*\"}]' # 设置主项目依赖的自建组件为本地目录 , hyperf 官方教程旧了,新的composer要用这个结构 composer config require.\"your_component/your_component\" dev-master # 指定项目依赖包 your_component.your_component , 等同于 composer require your_component.your_component 只是还没发布,所以手动编辑 cd hyperf-skeleton;rm -rf composer.lock \u0026\u0026 rm -rf vendor \u0026\u0026 composer update # 初始化主项目 , 把依赖都装上 ls -al vendor/your_component # 此时看到的应该是软连接 ","date":"2021-06-05","objectID":"/2021/06/%E5%9F%BA%E4%BA%8Egithub%E5%BC%80%E5%8F%91%E4%B8%80%E4%B8%AAphp%E7%9A%84%E9%80%82%E7%94%A8%E4%BA%8Ehyperf%E7%9A%84composer%E5%8C%85/:1:0","tags":["hyperf","php","composer","github"],"title":"基于github开发一个php的适用于hyperf的composer包","uri":"/2021/06/%E5%9F%BA%E4%BA%8Egithub%E5%BC%80%E5%8F%91%E4%B8%80%E4%B8%AAphp%E7%9A%84%E9%80%82%E7%94%A8%E4%BA%8Ehyperf%E7%9A%84composer%E5%8C%85/"},{"categories":["php","composer","github","hyperf"],"content":"仔细看设计规范 https://hyperf.wiki/2.0/#/zh-cn/component-guide/configprovider ","date":"2021-06-05","objectID":"/2021/06/%E5%9F%BA%E4%BA%8Egithub%E5%BC%80%E5%8F%91%E4%B8%80%E4%B8%AAphp%E7%9A%84%E9%80%82%E7%94%A8%E4%BA%8Ehyperf%E7%9A%84composer%E5%8C%85/:1:1","tags":["hyperf","php","composer","github"],"title":"基于github开发一个php的适用于hyperf的composer包","uri":"/2021/06/%E5%9F%BA%E4%BA%8Egithub%E5%BC%80%E5%8F%91%E4%B8%80%E4%B8%AAphp%E7%9A%84%E9%80%82%E7%94%A8%E4%BA%8Ehyperf%E7%9A%84composer%E5%8C%85/"},{"categories":["php","composer","github","hyperf"],"content":"省略开发过程一万字 (主要是要记得提交 your_component 目录的内容到github仓库) ","date":"2021-06-05","objectID":"/2021/06/%E5%9F%BA%E4%BA%8Egithub%E5%BC%80%E5%8F%91%E4%B8%80%E4%B8%AAphp%E7%9A%84%E9%80%82%E7%94%A8%E4%BA%8Ehyperf%E7%9A%84composer%E5%8C%85/:1:2","tags":["hyperf","php","composer","github"],"title":"基于github开发一个php的适用于hyperf的composer包","uri":"/2021/06/%E5%9F%BA%E4%BA%8Egithub%E5%BC%80%E5%8F%91%E4%B8%80%E4%B8%AAphp%E7%9A%84%E9%80%82%E7%94%A8%E4%BA%8Ehyperf%E7%9A%84composer%E5%8C%85/"},{"categories":["php","composer","github","hyperf"],"content":"发布一个可以使用的hyperf组件(通过composer可以安装) 去下面的地址 , 提交自己的包即可 包管理就是release一个包就好了 https://packagist.org/packages/submit ","date":"2021-06-05","objectID":"/2021/06/%E5%9F%BA%E4%BA%8Egithub%E5%BC%80%E5%8F%91%E4%B8%80%E4%B8%AAphp%E7%9A%84%E9%80%82%E7%94%A8%E4%BA%8Ehyperf%E7%9A%84composer%E5%8C%85/:1:3","tags":["hyperf","php","composer","github"],"title":"基于github开发一个php的适用于hyperf的composer包","uri":"/2021/06/%E5%9F%BA%E4%BA%8Egithub%E5%BC%80%E5%8F%91%E4%B8%80%E4%B8%AAphp%E7%9A%84%E9%80%82%E7%94%A8%E4%BA%8Ehyperf%E7%9A%84composer%E5%8C%85/"},{"categories":["docker","project","项目管理"],"content":"说明 系统要求,安装好 docker和docker-compose docker-compose up -d 就能拉起 禅道系统访问地址 http://127.0.0.1:2048 如果需要域名访问 ,请部署个nginx , 转发到 2048端口即可 # 进入docker-compose.yml文件所在的目录 , 执行以下命令就能拉起一个完整的禅道系统服务 docker network create local_network docker-compose up -d ","date":"2021-05-31","objectID":"/2021/05/%E6%9C%80%E5%BF%AB%E6%90%AD%E5%BB%BA%E7%A6%85%E9%81%93%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E7%9A%84%E6%96%B9%E6%A1%88/:0:1","tags":["docker","zentao","禅道项目管理","项目管理"],"title":"最快搭建禅道项目管理系统的方案","uri":"/2021/05/%E6%9C%80%E5%BF%AB%E6%90%AD%E5%BB%BA%E7%A6%85%E9%81%93%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E7%9A%84%E6%96%B9%E6%A1%88/"},{"categories":["docker","project","项目管理"],"content":"file docker-compose.yml version:'3'services:# adminer:# image: adminer# restart: always# networks:# - local_network# ports:# - 8080:8080# healthcheck:# test: [\"CMD\", \"curl\", \"-f\", \"http://localhost:8080\"]# interval: 1m30s# timeout: 10s# retries: 3# start_period: 30sdb:build:context:.dockerfile:Dockerfile_dbrestart:alwaysnetworks:- local_networkenvironment:MYSQL_ROOT_PASSWORD:123456_zentaoMYSQL_USER:zentaoMYSQL_PASSWORD:123456MYSQL_DATABASE:zentaovolumes:- mariadb_data:/var/lib/mysqlhealthcheck:test:\"/usr/bin/mysql --user=zentao --password=123456 --execute \\\"SHOW DATABASES;\\\"\"interval:2mtimeout:10sretries:3ports:- 3309:3306initzt:image:alpine:latestvolumes:- zentao_data:/homenetworks:- local_networkcommand:- /bin/sh- -c- |cd /home wget https://www.zentao.net/dl/zentao/15.0/ZenTaoPMS.15.0.stable.zip ls -l unzip -q -o ZenTaoPMS.15.0.stable.zip rm ZenTaoPMS.15.0.stable.zipweb:build:.networks:- local_networkrestart:alwaysports:- 2048:80- 11444:11444- 11443:11443volumes:- zentao_data:/var/wwwdepends_on:- db- initztvolumes:mariadb_data:zentao_data:networks:local_network:external:true 搭建是搭建完了 , 经过我半天多的使用感受 , 感觉不太好 , 被劝退了 混乱的产品设计 (搞不清楚 产品集 , 产品 , 项目 , 执行 的关系和功能) 默认的超管账号不是所有权都有的 默认账号看不到加人的入口 , 我是直接看源码撸码改出来那个菜单的. 代码风格还是比较老的模板风格 菜单和权限设计有问题 , 太多了 , 还搞不清楚怎么配置出来 ","date":"2021-05-31","objectID":"/2021/05/%E6%9C%80%E5%BF%AB%E6%90%AD%E5%BB%BA%E7%A6%85%E9%81%93%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E7%9A%84%E6%96%B9%E6%A1%88/:0:2","tags":["docker","zentao","禅道项目管理","项目管理"],"title":"最快搭建禅道项目管理系统的方案","uri":"/2021/05/%E6%9C%80%E5%BF%AB%E6%90%AD%E5%BB%BA%E7%A6%85%E9%81%93%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E7%9A%84%E6%96%B9%E6%A1%88/"},{"categories":["centos","deploy","gitlab","docker"],"content":"docker-compose.yml version:'3'services:gitlab.abc.com:container_name:gitlab.abc.comimage:gitlab/gitlab-ce:latest# image: gitlab/gitlab-ce:11.0.1-ce.0restart:alwaysprivileged:trueenvironment:GITLAB_OMNIBUS_CONFIG:|external_url 'https://gitlab.abc.com' gitlab_rails['time_zone'] = 'Asia/Shanghai' nginx['enable'] = false prometheus_monitoring['enable'] = false gitlab_workhorse['listen_network'] = \"tcp\" gitlab_workhorse['listen_addr'] = \":19900\" gitlab_rails['gitlab_shell_ssh_port'] = 19901ports:- \"19900:19900\"- \"19901:22\"- \"19091:9090\"volumes:- \"./ssl:/etc/gitlab/ssl\"- \"/data/gitlab.abc.com/config:/etc/gitlab:rw\"- \"/data/gitlab.abc.com/logs:/var/log/gitlab:rw\"- \"/data/gitlab.abc.com/data:/var/opt/gitlab:rw\"- \"/data/gitlab.abc.com/backups:/var/opt/gitlab/backups:rw\"gitlab-runner:restart:alwaysimage:gitlab/gitlab-runnerdepends_on:- gitlab.abc.comvolumes:- /data/gitlab/gitlab-runner/config:/etc/gitlab-runner:Z- /var/run/docker.sock:/var/run/docker.sockenvironment:- TZ=Asia/Shanghai yum install -y yum-utils yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo yum -y remove docker docker-client docker-client-latest docker-common docker-latest docker-latest-logrotate docker-logrotat docker-engine yum -y install docker-ce docker-ce-cli containerd.io systemctl start docker curl -L https://github.com/docker/compose/releases/download/1.23.2/docker-compose-`uname -s`-`uname -m` -o /usr/bin/docker-compose chmod +x /usr/bin/docker-compose mkdir -p /data/gitlab.abc.com/{logs,config,data,backups} mkdir -p ./ssl curl -L https://packages.gitlab.com/install/repositories/runner/gitlab-runner/script.rpm.sh | sudo bash yum -y install gitlab-runner gitlab-runner register # 查看: https://your.gitlab.url/admin/runners ","date":"2021-05-29","objectID":"/2021/05/centos8%E6%90%AD%E5%BB%BAgitlab%E5%92%8Cgitlab-runner/:1:0","tags":["centos","docker","gitlab","docker-compose","gitlab-runner"],"title":"Centos8搭建gitlab和gitlab-Runner","uri":"/2021/05/centos8%E6%90%AD%E5%BB%BAgitlab%E5%92%8Cgitlab-runner/"},{"categories":["centos","deploy","gitlab","docker"],"content":"gitlab-runner register 从gitlab获得注册所需要的信息 注册需要输入的内容 gitlab-runner register Runtime platform arch=amd64 os=linux pid=291523 revision=7a6612da version=13.12.0 Running in system-mode. Enter the GitLab instance URL (for example, https://gitlab.com/): https://gitlab.abc.com/ # 这里填入上图 标注的 1 的url Enter the registration token: {{ token }} # 这里填入上图标注 2 的 token 字符串 Enter a description for the runner: [adasdf]: sg-aliyun-test # 给你的runner起个名字 Enter tags for the runner (comma-separated): test,deploy,build,gitlab-ci # 起个标签 , 跟.gitlab-ci.yaml 的tags一致 , 它表示可以执行跟ci指定tags同名的tags的任务 Registering runner... succeeded runner=adfasdfasdf Enter an executor: parallels, ssh, virtualbox, custom, docker, docker-ssh, kubernetes, shell, docker+machine, docker-ssh+machine: shell # 这里选shell即可 Runner registered successfully. Feel free to start it, but if it's running already the config should be automatically reloaded! ","date":"2021-05-29","objectID":"/2021/05/centos8%E6%90%AD%E5%BB%BAgitlab%E5%92%8Cgitlab-runner/:1:1","tags":["centos","docker","gitlab","docker-compose","gitlab-runner"],"title":"Centos8搭建gitlab和gitlab-Runner","uri":"/2021/05/centos8%E6%90%AD%E5%BB%BAgitlab%E5%92%8Cgitlab-runner/"},{"categories":["centos","deploy","gitlab","docker"],"content":"配置本地的nginx服务器 # gitlab.abc.com.conf upstream gitlab{ # 域名对应 docker宿主机域名 # 端口对应 docker宿主机映射域名 server 127.0.0.1:19900; } server { listen 80; server_name gitlab.abc.com; rewrite ^(.*)$ https://${server_name}$1 permanent; } server { proxy_headers_hash_max_size 51200; proxy_headers_hash_bucket_size 6400; proxy_ssl_server_name on; proxy_ssl_name gitlab.abc.com; listen 443 ssl; server_name gitlab.abc.com; access_log /data/nginx/gitlab.abc.com/access_$logdate.log; error_log /data/nginx/gitlab.abc.com/error.log; ssl_session_cache shared:SSL:1m; ssl_certificate pem/gitlab.abc.com/cert.pem; # pem文件的路径 ssl_certificate_key pem/gitlab.abc.com/key.pem; # key文件的路径 ssl_session_timeout 5m; #缓存有效期 ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4; #加密算法 ssl_protocols TLSv1 TLSv1.1 TLSv1.2; #安全链接可选的加密协议 ssl_prefer_server_ciphers on; #使用服务器端的首选算法 location / { proxy_pass http://gitlab; proxy_http_version 1.1; proxy_set_header X_FORWARDED_PROTO https; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header Host $host; } location ~ .*\\.(js|css|png)$ { proxy_pass http://gitlab; } } 卸载 gitlab-runner !/bin/bash # 卸载gitlab-runner # 停止服务 gitlab-runner stop # 取消随机启动 chkconfig gitlab-runner off # 卸载服务 gitlab-runner uninstall # 清理文件 rm -rf /etc/gitlab-runner rm -rf /usr/local/bin/gitlab-runner rm -rf /usr/bin/gitlab-runner rm -rf /etc/sudoers.d/gitlab-runner # 删除用户 userdel -r gitlab-runner ","date":"2021-05-29","objectID":"/2021/05/centos8%E6%90%AD%E5%BB%BAgitlab%E5%92%8Cgitlab-runner/:2:0","tags":["centos","docker","gitlab","docker-compose","gitlab-runner"],"title":"Centos8搭建gitlab和gitlab-Runner","uri":"/2021/05/centos8%E6%90%AD%E5%BB%BAgitlab%E5%92%8Cgitlab-runner/"},{"categories":["macbook","mamp","swoole","hyperf","php"],"content":"这是一个在macbook环境下 , 用MAMP套件的小伙伴 , 如何安装一个yasd扩展进行调试 ","date":"2021-05-28","objectID":"/2021/05/macbookmamp%E5%A5%97%E4%BB%B6%E5%AE%89%E8%A3%85yasd%E6%89%A9%E5%B1%95%E8%B0%83%E8%AF%95swoole%E5%92%8Chyperf%E4%BB%A3%E7%A0%81/:0:0","tags":["macbook","mamp","swoole","hyperf","php"],"title":"MacbookMAMP套件安装yasd扩展调试swoole和hyperf代码","uri":"/2021/05/macbookmamp%E5%A5%97%E4%BB%B6%E5%AE%89%E8%A3%85yasd%E6%89%A9%E5%B1%95%E8%B0%83%E8%AF%95swoole%E5%92%8Chyperf%E4%BB%A3%E7%A0%81/"},{"categories":["macbook","mamp","swoole","hyperf","php"],"content":"步骤 下载yasd 编译yasd 配置php.ini ","date":"2021-05-28","objectID":"/2021/05/macbookmamp%E5%A5%97%E4%BB%B6%E5%AE%89%E8%A3%85yasd%E6%89%A9%E5%B1%95%E8%B0%83%E8%AF%95swoole%E5%92%8Chyperf%E4%BB%A3%E7%A0%81/:1:0","tags":["macbook","mamp","swoole","hyperf","php"],"title":"MacbookMAMP套件安装yasd扩展调试swoole和hyperf代码","uri":"/2021/05/macbookmamp%E5%A5%97%E4%BB%B6%E5%AE%89%E8%A3%85yasd%E6%89%A9%E5%B1%95%E8%B0%83%E8%AF%95swoole%E5%92%8Chyperf%E4%BB%A3%E7%A0%81/"},{"categories":["macbook","mamp","swoole","hyperf","php"],"content":"安装yasd扩展 debug是在本机debug , 端口是9001 # 这是debug的端口,换端口可以改这个9001 export DEBUG_PORT=9001 # 这是debug的host,127.0.0.1表示php所在的机器在debug , 一般来说开发都是在本地调试的,用127.0.0.1就好 export DEBUG_IP=127.0.0.1 brew install boost git clone https://github.com/swoole/yasd.git; cd yasd; phpize --clean \u0026\u0026 phpize ./configure make clean \u0026\u0026 make \u0026\u0026 make install export PHP_INI=`php -i | grep \"conf/php.ini\" | awk '{print $5}'`; echo '[xdebug]' \u003e\u003e $PHP_INI echo 'zend_extension=yasd' \u003e\u003e $PHP_INI echo 'yasd.debug_mode=remote' \u003e\u003e $PHP_INI echo 'yasd.remote_host='.$DEBUG_IP \u003e\u003e $PHP_INI echo 'yasd.remote_port='.$DEBUG_PORT \u003e\u003e $PHP_INI ","date":"2021-05-28","objectID":"/2021/05/macbookmamp%E5%A5%97%E4%BB%B6%E5%AE%89%E8%A3%85yasd%E6%89%A9%E5%B1%95%E8%B0%83%E8%AF%95swoole%E5%92%8Chyperf%E4%BB%A3%E7%A0%81/:2:0","tags":["macbook","mamp","swoole","hyperf","php"],"title":"MacbookMAMP套件安装yasd扩展调试swoole和hyperf代码","uri":"/2021/05/macbookmamp%E5%A5%97%E4%BB%B6%E5%AE%89%E8%A3%85yasd%E6%89%A9%E5%B1%95%E8%B0%83%E8%AF%95swoole%E5%92%8Chyperf%E4%BB%A3%E7%A0%81/"},{"categories":["macbook","mamp","swoole","hyperf","php"],"content":"phpstorm配置 对应端口改9001 ","date":"2021-05-28","objectID":"/2021/05/macbookmamp%E5%A5%97%E4%BB%B6%E5%AE%89%E8%A3%85yasd%E6%89%A9%E5%B1%95%E8%B0%83%E8%AF%95swoole%E5%92%8Chyperf%E4%BB%A3%E7%A0%81/:3:0","tags":["macbook","mamp","swoole","hyperf","php"],"title":"MacbookMAMP套件安装yasd扩展调试swoole和hyperf代码","uri":"/2021/05/macbookmamp%E5%A5%97%E4%BB%B6%E5%AE%89%E8%A3%85yasd%E6%89%A9%E5%B1%95%E8%B0%83%E8%AF%95swoole%E5%92%8Chyperf%E4%BB%A3%E7%A0%81/"},{"categories":["deploy","aliyun","hyperf"],"content":"服务需要用到 免密登录配置 openresty php7 swoole nginx config gitlab runner gitlab ci php-redis扩展 ","date":"2021-05-28","objectID":"/2021/05/%E9%98%BF%E9%87%8C%E4%BA%91%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BAhyperf%E6%9C%8D%E5%8A%A1%E5%99%A8/:0:1","tags":["aliyun","centos","oss","hyperf","deploy","phpredis"],"title":"阿里云从零开始搭建hyperf服务器","uri":"/2021/05/%E9%98%BF%E9%87%8C%E4%BA%91%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BAhyperf%E6%9C%8D%E5%8A%A1%E5%99%A8/"},{"categories":["deploy","aliyun","hyperf"],"content":"一些约定 编译的源码目录 /data/src/install/{包名}/{src/,*.tag.gz} 网站目录 /data/src/web/{域名} 服务器说明 /root/README.md 服务器部署说明 /root/README.install.md 软件安装目录 /usr/local/软件名-版本号 , 并创建一个软链接到 /usr/local/软件名 ","date":"2021-05-28","objectID":"/2021/05/%E9%98%BF%E9%87%8C%E4%BA%91%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BAhyperf%E6%9C%8D%E5%8A%A1%E5%99%A8/:0:2","tags":["aliyun","centos","oss","hyperf","deploy","phpredis"],"title":"阿里云从零开始搭建hyperf服务器","uri":"/2021/05/%E9%98%BF%E9%87%8C%E4%BA%91%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BAhyperf%E6%9C%8D%E5%8A%A1%E5%99%A8/"},{"categories":["deploy","aliyun","hyperf"],"content":"下载安装脚本(直接运行即可) centos8_install_openresty_swoole_server.sh ","date":"2021-05-28","objectID":"/2021/05/%E9%98%BF%E9%87%8C%E4%BA%91%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BAhyperf%E6%9C%8D%E5%8A%A1%E5%99%A8/:0:3","tags":["aliyun","centos","oss","hyperf","deploy","phpredis"],"title":"阿里云从零开始搭建hyperf服务器","uri":"/2021/05/%E9%98%BF%E9%87%8C%E4%BA%91%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BAhyperf%E6%9C%8D%E5%8A%A1%E5%99%A8/"},{"categories":["deploy","aliyun","hyperf"],"content":"安装说明 软件 路径 源码 备注 openresty /usr/local/openresty/bin/php /usr/local/openresty systemctl restart openresty php /usr/local/php/bin/php /usr/local/php /data/src/install/php-7.4.19 免密登录配置 ## 在服务器上执行, 下次就可以不输入密码登录 echo \"你自己笔记本或者电脑的`cat ~/.ssh/id_rsa.pub`内容\" \u003e\u003e ~/.ssh/authorized_keys; openresty wget https://openresty.org/package/centos/openresty.repo -O /etc/yum.repos.d/openresty.repo yum check-update yum install -y openresty systemctl start openresty systemctl enable openresty ls -al /usr/local/openresty/ ls -al /usr/local/openresty/nginx/sbin PHP源码编译安装 yum install -y libxml2-devel krb5-devel openssl-devel sqlite-devel libcurl-devel libxslt-devel libjpeg-devel libzip-devel bzip2-devel libpng-devel freetype-devel autoconf automake libtool export ONIGURUMA_VERSION=6.9.4 mkdir -p /data/src/install/oniguruma-$ONIGURUMA_VERSION cd /data/src/install/oniguruma-$ONIGURUMA_VERSION wget -c https://github.com/kkos/oniguruma/archive/v$ONIGURUMA_VERSION.tar.gz -O oniguruma-$ONIGURUMA_VERSION.tar.gz tar xvzf oniguruma-$ONIGURUMA_VERSION.tar.gz; cd oniguruma-$ONIGURUMA_VERSION; ./autogen.sh \u0026\u0026 ./configure --prefix=/usr make \u0026\u0026 make install # install php export PHP_VERSION=7.4.19 mkdir -p /data/src/install/php-$PHP_VERSION cd /data/src/install/php-$PHP_VERSION wget -c https://www.php.net/distributions/php-$PHP_VERSION.tar.gz --no-check-certificate; tar xvzf php-$PHP_VERSION.tar.gz; cd /data/src/install/php-$PHP_VERSION/php-$PHP_VERSION; ./configure --prefix=/usr/local/php-$PHP_VERSION --with-curl --with-freetype --enable-gd --with-jpeg --with-gettext --with-iconv-dir=/usr/local --with-kerberos --with-libdir=lib64 --with-libxml --with-mysqli --with-openssl --with-pdo-mysql --with-pdo-sqlite --with-pear --enable-sockets --with-mhash --with-ldap-sasl --with-xmlrpc --with-xsl --with-zlib --enable-fpm --enable-bcmath --enable-inline-optimization --enable-mbregex --enable-mbstring --enable-opcache --enable-pcntl --enable-shmop --enable-soap --enable-sockets --enable-sysvsem --enable-xml --with-zip --with-config-file-path=/usr/local/php-$PHP_VERSION/etc -with-bz2 --enable-inline-optimization --enable-sysvsem make \u0026\u0026 make install cp php.ini-production /usr/local/php-$PHP_VERSION/etc/php.ini cp /usr/local/php-$PHP_VERSION/etc/php-fpm.conf.default /usr/local/php-$PHP_VERSION/etc/php-fpm.d/www.conf ln -s /usr/local/php-$PHP_VERSION /usr/local/php /usr/local/php/bin/php -v /usr/local/php-$PHP_VERSION/bin/php -v echo 'pathmunge /usr/local/php/bin' \u003e\u003e /etc/profile.d/php.sh # install php-redis export PHPREDIS_VERSION=5.3.4 mkdir -p /data/src/install/phpredis-$PHPREDIS_VERSION cd /data/src/install/phpredis-$PHPREDIS_VERSION wget https://github.com/phpredis/phpredis/archive/refs/tags/$PHPREDIS_VERSION.tar.gz --no-check-certificate -O phpredis-$PHPREDIS_VERSION.tar.gz; tar xvzf phpredis-$PHPREDIS_VERSION.tar.gz cd phpredis-$PHPREDIS_VERSION /usr/local/php/bin/phpize ./configure --with-php-config=/usr/local/php/bin/php-config make \u0026\u0026 make install echo 'extension=\"redis.so\"' \u003e\u003e /usr/local/php/etc/php.ini php -m | grep redis swoole yum install -y glibc-headers gcc-c++ export SWOOLE_VERSION=4.6.7 mkdir -p /data/src/install/swoole-$SWOOLE_VERSION cd /data/src/install/swoole-$SWOOLE_VERSION wget -c https://pecl.php.net/get/swoole-$SWOOLE_VERSION.tgz -O /data/src/install/swoole-$SWOOLE_VERSION/swoole-$SWOOLE_VERSION.tgz --no-check-certificate tar -zvxf swoole-$SWOOLE_VERSION.tgz cd swoole-$SWOOLE_VERSION /usr/local/php/bin/phpize ./configure --with-php-config=/usr/local/php/bin/php-config --enable-openssl --enable-http2 --enable-swoole-json --enable-swoole-curl make \u0026\u0026 make install echo 'extension=\"swoole.so\"' \u003e\u003e /usr/local/php/etc/php.ini echo 'swoole.use_shortname = off' \u003e\u003e /usr/local/php/etc/php.ini php -m | grep swoole nginx config server { listen 80; server_name api.abc.com; error_page 500 502 503 504 /50x.html; error_log /data/nginx/api.abc.com/error.log; access_log /data/nginx/api.abc.com/access_$logdate.log; #root /mnt/d/wsl/www/playsmart/; index index.html index.h","date":"2021-05-28","objectID":"/2021/05/%E9%98%BF%E9%87%8C%E4%BA%91%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BAhyperf%E6%9C%8D%E5%8A%A1%E5%99%A8/:0:4","tags":["aliyun","centos","oss","hyperf","deploy","phpredis"],"title":"阿里云从零开始搭建hyperf服务器","uri":"/2021/05/%E9%98%BF%E9%87%8C%E4%BA%91%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BAhyperf%E6%9C%8D%E5%8A%A1%E5%99%A8/"},{"categories":["blog"],"content":"配图工具 一篇文章如果是存文字 , 感官会差很多 . 有个高质量的图片会让枯燥的博文增色不少. ","date":"2021-05-28","objectID":"/2021/05/%E6%8E%A8%E8%8D%90%E5%86%99%E5%8D%9A%E5%AE%A2%E7%9A%84%E5%9C%A8%E7%BA%BF%E5%B7%A5%E5%85%B7/:1:0","tags":["博客","工具"],"title":"推荐写博客的在线工具","uri":"/2021/05/%E6%8E%A8%E8%8D%90%E5%86%99%E5%8D%9A%E5%AE%A2%E7%9A%84%E5%9C%A8%E7%BA%BF%E5%B7%A5%E5%85%B7/"},{"categories":["blog"],"content":"这是一个很方便的在线配图工具,点赞啊 http://placeimg.com/ 这里使用的图片链接 http://placeimg.com/800/250/any ","date":"2021-05-28","objectID":"/2021/05/%E6%8E%A8%E8%8D%90%E5%86%99%E5%8D%9A%E5%AE%A2%E7%9A%84%E5%9C%A8%E7%BA%BF%E5%B7%A5%E5%85%B7/:1:1","tags":["博客","工具"],"title":"推荐写博客的在线工具","uri":"/2021/05/%E6%8E%A8%E8%8D%90%E5%86%99%E5%8D%9A%E5%AE%A2%E7%9A%84%E5%9C%A8%E7%BA%BF%E5%B7%A5%E5%85%B7/"},{"categories":["blog"],"content":"颜色选择器 你是不是在苦恼配色? 用这个试试 , 有类似色给你选 https://htmlcolorcodes.com/zh/yanse-xuanze-qi/ ","date":"2021-05-28","objectID":"/2021/05/%E6%8E%A8%E8%8D%90%E5%86%99%E5%8D%9A%E5%AE%A2%E7%9A%84%E5%9C%A8%E7%BA%BF%E5%B7%A5%E5%85%B7/:2:0","tags":["博客","工具"],"title":"推荐写博客的在线工具","uri":"/2021/05/%E6%8E%A8%E8%8D%90%E5%86%99%E5%8D%9A%E5%AE%A2%E7%9A%84%E5%9C%A8%E7%BA%BF%E5%B7%A5%E5%85%B7/"},{"categories":["blog"],"content":"在线favicon工具 ","date":"2021-05-28","objectID":"/2021/05/%E6%8E%A8%E8%8D%90%E5%86%99%E5%8D%9A%E5%AE%A2%E7%9A%84%E5%9C%A8%E7%BA%BF%E5%B7%A5%E5%85%B7/:3:0","tags":["博客","工具"],"title":"推荐写博客的在线工具","uri":"/2021/05/%E6%8E%A8%E8%8D%90%E5%86%99%E5%8D%9A%E5%AE%A2%E7%9A%84%E5%9C%A8%E7%BA%BF%E5%B7%A5%E5%85%B7/"},{"categories":["blog"],"content":"一个站点需要一些基础的logo,例如favicon , 头像 , 首页logo等一套图片 , 这个站点就是一个很好的解决方案 https://realfavicongenerator.net/ ","date":"2021-05-28","objectID":"/2021/05/%E6%8E%A8%E8%8D%90%E5%86%99%E5%8D%9A%E5%AE%A2%E7%9A%84%E5%9C%A8%E7%BA%BF%E5%B7%A5%E5%85%B7/:3:1","tags":["博客","工具"],"title":"推荐写博客的在线工具","uri":"/2021/05/%E6%8E%A8%E8%8D%90%E5%86%99%E5%8D%9A%E5%AE%A2%E7%9A%84%E5%9C%A8%E7%BA%BF%E5%B7%A5%E5%85%B7/"},{"categories":["deploy","gitlab"],"content":"通过gitlab的ci自动部署前端项目到阿里云的oss ","date":"2021-05-27","objectID":"/2021/05/%E9%80%9A%E8%BF%87gitlab%E7%9A%84ci%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E5%89%8D%E7%AB%AF%E9%A1%B9%E7%9B%AE%E5%88%B0%E9%98%BF%E9%87%8C%E4%BA%91%E7%9A%84oss/:1:0","tags":["aliyun","gitlab","ci","oss","npm","deploy"],"title":"通过gitlab的ci自动部署前端项目到阿里云的oss","uri":"/2021/05/%E9%80%9A%E8%BF%87gitlab%E7%9A%84ci%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E5%89%8D%E7%AB%AF%E9%A1%B9%E7%9B%AE%E5%88%B0%E9%98%BF%E9%87%8C%E4%BA%91%E7%9A%84oss/"},{"categories":["deploy","gitlab"],"content":"gitlab-ci.yml # 指定使用的镜像image:node:latest# 执行步骤，依次执行stages:- install- build- deploy# 上传到服务器deploy-job:dep:stage:deploycache:paths:- node_modules/only:- alphascript:- |echo \"git checkout ${CI_COMMIT_REF_NAME} --\"; git checkout ${CI_COMMIT_REF_NAME} -- npm i npm run build # 这里需要自己看一下script的build的内容 ossutil64 config -e $OSS_END_POINT -i $OSS_ACCESS_KEY_ID -k $OSS_ACCESS_KEY_SECRET ossutil64 cp -r -f dist/ oss://$OSS_BUCKET_NAMEtags:- deploy ","date":"2021-05-27","objectID":"/2021/05/%E9%80%9A%E8%BF%87gitlab%E7%9A%84ci%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E5%89%8D%E7%AB%AF%E9%A1%B9%E7%9B%AE%E5%88%B0%E9%98%BF%E9%87%8C%E4%BA%91%E7%9A%84oss/:1:1","tags":["aliyun","gitlab","ci","oss","npm","deploy"],"title":"通过gitlab的ci自动部署前端项目到阿里云的oss","uri":"/2021/05/%E9%80%9A%E8%BF%87gitlab%E7%9A%84ci%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E5%89%8D%E7%AB%AF%E9%A1%B9%E7%9B%AE%E5%88%B0%E9%98%BF%E9%87%8C%E4%BA%91%E7%9A%84oss/"},{"categories":["deploy","gitlab"],"content":"在gitlab对应项目中增加变量(gitlab-ci会用到) OSS_END_POINT oss的endpoint OSS_ACCESS_KEY_ID oss的accessKeyId OSS_ACCESS_KEY_SECRET oss的AccessKeySecret OSS_BUCKET_NAME oss的bucketName ","date":"2021-05-27","objectID":"/2021/05/%E9%80%9A%E8%BF%87gitlab%E7%9A%84ci%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E5%89%8D%E7%AB%AF%E9%A1%B9%E7%9B%AE%E5%88%B0%E9%98%BF%E9%87%8C%E4%BA%91%E7%9A%84oss/:1:2","tags":["aliyun","gitlab","ci","oss","npm","deploy"],"title":"通过gitlab的ci自动部署前端项目到阿里云的oss","uri":"/2021/05/%E9%80%9A%E8%BF%87gitlab%E7%9A%84ci%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E5%89%8D%E7%AB%AF%E9%A1%B9%E7%9B%AE%E5%88%B0%E9%98%BF%E9%87%8C%E4%BA%91%E7%9A%84oss/"},{"categories":["deploy","gitlab"],"content":"oss的bucket需要设置 对象存储 \u003e bucket name \u003e 权限管理 Bucket ACL -\u003e 公开读 Bucket 授权策略 , 给你的账号读写授权 (账号跟这两个变量关联的 OSS_ACCESS_KEY_ID , OSS_ACCESS_KEY_SECRET) 跨域设置(加上自己的访问域) 对象存储 \u003e bucket name \u003e 权限管理 绑定域名 , 可以设置https证书 , 需要对域名做cname绑定 ","date":"2021-05-27","objectID":"/2021/05/%E9%80%9A%E8%BF%87gitlab%E7%9A%84ci%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E5%89%8D%E7%AB%AF%E9%A1%B9%E7%9B%AE%E5%88%B0%E9%98%BF%E9%87%8C%E4%BA%91%E7%9A%84oss/:1:3","tags":["aliyun","gitlab","ci","oss","npm","deploy"],"title":"通过gitlab的ci自动部署前端项目到阿里云的oss","uri":"/2021/05/%E9%80%9A%E8%BF%87gitlab%E7%9A%84ci%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E5%89%8D%E7%AB%AF%E9%A1%B9%E7%9B%AE%E5%88%B0%E9%98%BF%E9%87%8C%E4%BA%91%E7%9A%84oss/"},{"categories":["deploy","gitlab"],"content":"在gitlab-runner机器 ","date":"2021-05-27","objectID":"/2021/05/%E9%80%9A%E8%BF%87gitlab%E7%9A%84ci%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E5%89%8D%E7%AB%AF%E9%A1%B9%E7%9B%AE%E5%88%B0%E9%98%BF%E9%87%8C%E4%BA%91%E7%9A%84oss/:2:0","tags":["aliyun","gitlab","ci","oss","npm","deploy"],"title":"通过gitlab的ci自动部署前端项目到阿里云的oss","uri":"/2021/05/%E9%80%9A%E8%BF%87gitlab%E7%9A%84ci%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E5%89%8D%E7%AB%AF%E9%A1%B9%E7%9B%AE%E5%88%B0%E9%98%BF%E9%87%8C%E4%BA%91%E7%9A%84oss/"},{"categories":["deploy","gitlab"],"content":"安装runner(docker的方式) docker run -d --name gitlab-share-runner --restart always -v /data/gitlab-runner/config:/etc/gitlab-runner -v /var/run/docker.sock:/var/run/docker.sock gitlab/gitlab-runner:latest //启动一个容器 docker exec -it gitlab-share-runner gitlab-runner register //注册到Gtilab ","date":"2021-05-27","objectID":"/2021/05/%E9%80%9A%E8%BF%87gitlab%E7%9A%84ci%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E5%89%8D%E7%AB%AF%E9%A1%B9%E7%9B%AE%E5%88%B0%E9%98%BF%E9%87%8C%E4%BA%91%E7%9A%84oss/:2:1","tags":["aliyun","gitlab","ci","oss","npm","deploy"],"title":"通过gitlab的ci自动部署前端项目到阿里云的oss","uri":"/2021/05/%E9%80%9A%E8%BF%87gitlab%E7%9A%84ci%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E5%89%8D%E7%AB%AF%E9%A1%B9%E7%9B%AE%E5%88%B0%E9%98%BF%E9%87%8C%E4%BA%91%E7%9A%84oss/"},{"categories":["deploy","gitlab"],"content":"安装runner的第二种方式(centos直接安装 , 我选用这种) yum install -y gitlab-runner ### 安装nodejs (用mvn管理 , 如果需要其他版本的nvm , 可以 nvm install 14.17.0; nvm alias default v14.17.0) curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.38.0/install.sh | bash echo 'export NVM_DIR=\"$HOME/.nvm\"' \u003e /etc/profile.d/nvm.sh echo '[ -s \"$NVM_DIR/nvm.sh\" ] \u0026\u0026 \\. \"$NVM_DIR/nvm.sh\" # This loads nvm' \u003e\u003e /etc/profile.d/nvm.sh echo '[ -s \"$NVM_DIR/bash_completion\" ] \u0026\u0026 \\. \"$NVM_DIR/bash_completion\" # This loads nvm bash_completion' \u003e\u003e /etc/profile.d/nvm.sh source /etc/profile nvm install node wget http://gosspublic.alicdn.com/ossutil/1.7.3/ossutil64 -O /usr/bin/ossutil64 chmod 755 /usr/bin/ossutil64 ### gitlab-runner 也需要安装node , 否则gitlab-ci执行会找到npm su gitlab-runner curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.38.0/install.sh | bash nvm install node ","date":"2021-05-27","objectID":"/2021/05/%E9%80%9A%E8%BF%87gitlab%E7%9A%84ci%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E5%89%8D%E7%AB%AF%E9%A1%B9%E7%9B%AE%E5%88%B0%E9%98%BF%E9%87%8C%E4%BA%91%E7%9A%84oss/:2:2","tags":["aliyun","gitlab","ci","oss","npm","deploy"],"title":"通过gitlab的ci自动部署前端项目到阿里云的oss","uri":"/2021/05/%E9%80%9A%E8%BF%87gitlab%E7%9A%84ci%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E5%89%8D%E7%AB%AF%E9%A1%B9%E7%9B%AE%E5%88%B0%E9%98%BF%E9%87%8C%E4%BA%91%E7%9A%84oss/"},{"categories":["deploy","gitlab"],"content":"配置script,配合gitlab-ci执行打包上传命令 ","date":"2021-05-27","objectID":"/2021/05/%E9%80%9A%E8%BF%87gitlab%E7%9A%84ci%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E5%89%8D%E7%AB%AF%E9%A1%B9%E7%9B%AE%E5%88%B0%E9%98%BF%E9%87%8C%E4%BA%91%E7%9A%84oss/:3:0","tags":["aliyun","gitlab","ci","oss","npm","deploy"],"title":"通过gitlab的ci自动部署前端项目到阿里云的oss","uri":"/2021/05/%E9%80%9A%E8%BF%87gitlab%E7%9A%84ci%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E5%89%8D%E7%AB%AF%E9%A1%B9%E7%9B%AE%E5%88%B0%E9%98%BF%E9%87%8C%E4%BA%91%E7%9A%84oss/"},{"categories":["deploy","gitlab"],"content":"package.json { \"scripts\": { \"deploy\": \"npx aliyunoss-cli --releaseEnv dev\", \"publish\": \"npm i \u0026\u0026 npm run build \u0026\u0026 npm run deploy\", \"build\": \"vue-cli-service build --mode production\" } } ","date":"2021-05-27","objectID":"/2021/05/%E9%80%9A%E8%BF%87gitlab%E7%9A%84ci%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E5%89%8D%E7%AB%AF%E9%A1%B9%E7%9B%AE%E5%88%B0%E9%98%BF%E9%87%8C%E4%BA%91%E7%9A%84oss/:3:1","tags":["aliyun","gitlab","ci","oss","npm","deploy"],"title":"通过gitlab的ci自动部署前端项目到阿里云的oss","uri":"/2021/05/%E9%80%9A%E8%BF%87gitlab%E7%9A%84ci%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E5%89%8D%E7%AB%AF%E9%A1%B9%E7%9B%AE%E5%88%B0%E9%98%BF%E9%87%8C%E4%BA%91%E7%9A%84oss/"},{"categories":["linux"],"content":"如何升级centos的内核版本 rpm -import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org rpm -Uvh http://www.elrepo.org/elrepo-release-7.0-2.el7.elrepo.noarch.rpm # list all kernel yum --disablerepo=\"*\" --enablerepo=\"elrepo-kernel\" list # use newest kernel yum --enablerepo=elrepo-kernel -y install kernel-ml kernel-ml-devel # or use a normal kernel yum --enablerepo=elrepo-kernel -y install kernel-lt kernel-lt-devel # list all kernel can use awk -F\\' '$1==\"menuentry \" {print i++ \" : \" $2}' /etc/grub2.cfg # set boot kernel grub2-set-default 0 # let grub run grub2-mkconfig -o /boot/grub2/grub.cfg # reboot reboot; # clean older kernel # list rpm -qa | grep kernel # remove older kernal rmp # yum remove kernel-tools-3.10.0-957.el7.x86_64 kernel-headers-3.10.0-1062.12.1.el7.x86_64 kernel-3.10.0-957.el7.x86_64 kernel-debug-devel-3.10.0-1062.12.1.el7.x86_64 kernel-tools-libs-3.10.0-957.el7.x86_64 ","date":"2021-05-26","objectID":"/2021/05/%E5%A6%82%E4%BD%95%E5%8D%87%E7%BA%A7centos%E7%9A%84%E5%86%85%E6%A0%B8%E7%89%88%E6%9C%AC/:1:0","tags":["linux","kernel","centos"],"title":"如何升级centos的内核版本","uri":"/2021/05/%E5%A6%82%E4%BD%95%E5%8D%87%E7%BA%A7centos%E7%9A%84%E5%86%85%E6%A0%B8%E7%89%88%E6%9C%AC/"},{"categories":["install"],"content":"install in centos #!/bin/sh URL=https://github.com/sharkdp/bat/releases/download/v0.18.1/bat-v0.18.1-x86_64-unknown-linux-musl.tar.gz wget -c -O bat.tar.gz $URL; tar -xvzf bat.tar.gz -C /usr/local; ln -s /usr/local/bat-v0.18.1-x86_64-unknown-linux-musl/bat /usr/local/bin/bat ","date":"2021-05-26","objectID":"/2021/05/centos_install_bat_a_better_cat/:1:0","tags":["centos","bat"],"title":"Centos_install_bat_a_better_cat","uri":"/2021/05/centos_install_bat_a_better_cat/"},{"categories":["hugo"],"content":"mermaidjs是一个优秀的绘图的js库 , 支持流程图 , 时序图 , 类图 , 状态图等功能. 把它引入到hugo模板 , 写技术方案特别方便. ","date":"2021-05-26","objectID":"/2021/05/hugo%E5%A2%9E%E5%8A%A0mermaidjs%E7%9A%84%E6%94%AF%E6%8C%81/:0:0","tags":["hugo","theme","mermaid"],"title":"hugo增加mermaidjs的支持","uri":"/2021/05/hugo%E5%A2%9E%E5%8A%A0mermaidjs%E7%9A%84%E6%94%AF%E6%8C%81/"},{"categories":["hugo"],"content":"它的在线编辑器 https://mermaid-js.github.io/mermaid-live-editor/ ","date":"2021-05-26","objectID":"/2021/05/hugo%E5%A2%9E%E5%8A%A0mermaidjs%E7%9A%84%E6%94%AF%E6%8C%81/:1:0","tags":["hugo","theme","mermaid"],"title":"hugo增加mermaidjs的支持","uri":"/2021/05/hugo%E5%A2%9E%E5%8A%A0mermaidjs%E7%9A%84%E6%94%AF%E6%8C%81/"},{"categories":["hugo"],"content":"步骤 修改模板 head.html (底部追加内容) \u003c!-- file layouts/partials/head.html --\u003e {{ if .Params.mermaid }} \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/mermaid/8.9.3/mermaid.min.js\" integrity=\"sha512-kxc8+BGu0/ESUMiK6Q/goKwwcoIoFVcXZ4GwMoGupMA/qTGx19BcNn1uiebOZO5f85ZD0oTdvlRKdeNh3RTnVg==\" crossorigin=\"anonymous\" referrerpolicy=\"no-referrer\"\u003e\u003c/script\u003e \u003cscript\u003e // Replace mermaid pre.code to div Array.from(document.getElementsByClassName(\"language-mermaid\")).forEach( (el) =\u003e { el.parentElement.outerHTML = `\u003cdiv class=\"mermaid\"\u003e${el.innerText}\u003c/div\u003e`; } ); \u003c/script\u003e \u003cstyle\u003e /* Set svg to center */ .mermaid svg { display: block; margin: auto; } \u003c/style\u003e {{ end }} 文章增加配置 ---mermaid:true--- ","date":"2021-05-26","objectID":"/2021/05/hugo%E5%A2%9E%E5%8A%A0mermaidjs%E7%9A%84%E6%94%AF%E6%8C%81/:2:0","tags":["hugo","theme","mermaid"],"title":"hugo增加mermaidjs的支持","uri":"/2021/05/hugo%E5%A2%9E%E5%8A%A0mermaidjs%E7%9A%84%E6%94%AF%E6%8C%81/"},{"categories":["hugo"],"content":"test %%{init: {'theme': 'forest', 'fill': 'white', 'securitylevel': 'loose' } }%% sequenceDiagram participant Alice participant Bob Alice-\u003e\u003eJohn: Hello John, how are you? loop Healthcheck John-\u003e\u003eJohn: Fight against hypochondria end Note right of John: Rational thoughts \u003cbr/\u003eprevail! John--\u003e\u003eAlice: Great! John-\u003e\u003eBob: How about you? Bob--\u003e\u003eJohn: Jolly good! %%{init: {'theme': 'forest', 'fill': 'white' } }%% sequenceDiagram participant Alice participant Bob Alice-\u003e\u003eJohn: Hello John, how are you? loop Healthcheck John-\u003e\u003eJohn: Fight against hypochondria end Note right of John: Rational thoughts \u003cbr/\u003eprevail! John--\u003e\u003eAlice: Great! John-\u003e\u003eBob: How about you? Bob--\u003e\u003eJohn: Jolly good! graph TD; A--\u003eB; A--\u003eC; B--\u003eD; C--\u003eD; graph TD; A--\u003eB; A--\u003eC; B--\u003eD; C--\u003eD; sequenceDiagram 产品-\u003e\u003e+后端: 接需求 后端-\u003e\u003e+前端: 提交联调(本地自测完毕) [develop-\u003efeature) 前端--\u003e\u003e-后端: 完成对接(在测试环境) [feature-\u003etest] 后端--\u003e\u003e-测试: 提测(在测试环境) [feature-\u003etest] 测试--\u003e\u003e+产品: 验收 (在预发布环境) [feature-\u003edevelop-\u003emaster] 产品-\u003e\u003e+上线: 上线(本地自测完毕) [master] sequenceDiagram 产品-\u003e\u003e+后端: 接需求 后端-\u003e\u003e+前端: 提交联调(本地自测完毕) [develop-\u003efeature) 前端--\u003e\u003e-后端: 完成对接(在测试环境) [feature-\u003etest] 后端--\u003e\u003e-测试: 提测(在测试环境) [feature-\u003etest] 测试--\u003e\u003e+产品: 验收 (在预发布环境) [feature-\u003edevelop-\u003emaster] 产品-\u003e\u003e+上线: 上线(本地自测完毕) [master] classDiagram Animal \u003c|-- Duck Animal \u003c|-- Fish Animal \u003c|-- Zebra Animal : +int age Animal : +String gender Animal: +isMammal() Animal: +mate() class Duck{ +String beakColor +swim() +quack() } class Fish{ -int sizeInFeet -canEat() } class Zebra{ +bool is_wild +run() } classDiagram Animal \u003c|-- Duck Animal \u003c|-- Fish Animal \u003c|-- Zebra Animal : +int age Animal : +String gender Animal: +isMammal() Animal: +mate() class Duck{ +String beakColor +swim() +quack() } class Fish{ -int sizeInFeet -canEat() } class Zebra{ +bool is_wild +run() } ","date":"2021-05-26","objectID":"/2021/05/hugo%E5%A2%9E%E5%8A%A0mermaidjs%E7%9A%84%E6%94%AF%E6%8C%81/:2:1","tags":["hugo","theme","mermaid"],"title":"hugo增加mermaidjs的支持","uri":"/2021/05/hugo%E5%A2%9E%E5%8A%A0mermaidjs%E7%9A%84%E6%94%AF%E6%8C%81/"},{"categories":["hugo","github","github action"],"content":"如何使用hugo快速创建一个github page 创建github项目(私有项目 + 公开项目) github.com/mmfei/mmfei.github.io.source; # 源项目 主要是用来生成网站项目 , 私有 github.com/mmfei/mmfei.github.io; # 网站项目 用来做 github page 的网站目录 # 安装hugo (mac环境下的安装方式 , 其他环境请看 gohugo.io) brew install hugo; # clone 私有项目 git clone github.com/mmfei/mmfei.github.io.source; cd mmfei.github.io.source; hugo new site .; hugo new post/first.md; # 往里面填充点内容 # 修改文件 config.tom cat config.tom \u003c\u003cEOT theme = \"beautifulhugo\" EOT # 修改文件 config.toml cat config.toml \u003c\u003cEOT baseURL = \"https://mmfei.github.io/\" languageCode = \"en-us\" title = \"木木飞\" theme = \"beautifulhugo\" EOT git add *; git commit -m \"commit_message\"; git push origin master; 创建本人在github的token(作为 GH_TOKEN 的值) https://github.com/settings/tokens 创建TOKEN (MY_GH_TOKEN) (需要赋予写仓库的权限,这个token是要给mmfei.github.io.source项目生成mmfei.github.io文件用的) https://github.com/mmfei/mmfei.github.io/settings/secrets/actions 设置page https://github.com/mmfei/mmfei.github.io/settings/pages 生成部署相关的公私钥 , 用来从 mmfei.github.io.source 发布 内容到 mmfei.github.io ssh-keygen -t rsa -b 4069 -C \"abc@abc.com\"; # 这里要替换成为你的邮箱地址 , 假设指定生成的文件为 ~/.ssh/id_rs_hugo_deploy.pub , ~/.ssh/id_rs_hugo_deploy ## 下面的 ACTIONS_DEPLOY_KEY 的值 /bin/cat ~/.ssh/id_rs_hugo_deploy.pub; ## 下面的 deploy key 的数值 /bin/cat ~/.ssh/id_rs_hugo_deploy; 设置 mmfei.github.io 项目 https://github.com/mmfei/mmfei.github.io/settings/keys 创建一个deploy key (值是上面的 ~/.ssh/id_rs_hugo_deploy 的内容), 需要写入权限 , 目的是给source项目推内容上来用 ","date":"2021-05-23","objectID":"/2021/05/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8hugo%E5%BF%AB%E9%80%9F%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AAgithub%E7%9A%84page/:0:1","tags":["hugo","github"],"title":"如何使用hugo快速创建一个github的page","uri":"/2021/05/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8hugo%E5%BF%AB%E9%80%9F%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AAgithub%E7%9A%84page/"},{"categories":["hugo","github","github action"],"content":"打开源目录的url,设置 ","date":"2021-05-23","objectID":"/2021/05/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8hugo%E5%BF%AB%E9%80%9F%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AAgithub%E7%9A%84page/:0:2","tags":["hugo","github"],"title":"如何使用hugo快速创建一个github的page","uri":"/2021/05/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8hugo%E5%BF%AB%E9%80%9F%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AAgithub%E7%9A%84page/"},{"categories":["hugo","github","github action"],"content":"设置 mmfei.github.io.source https://github.com/mmfei/mmfei.github.io.source/settings/secrets/actions 创建两个secret ACTIONS_DEPLOY_KEY 的值为上面生成的pub GH_TOKEN 的值为上面的MY_GH_TOKEN的值 ","date":"2021-05-23","objectID":"/2021/05/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8hugo%E5%BF%AB%E9%80%9F%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AAgithub%E7%9A%84page/:0:3","tags":["hugo","github"],"title":"如何使用hugo快速创建一个github的page","uri":"/2021/05/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8hugo%E5%BF%AB%E9%80%9F%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AAgithub%E7%9A%84page/"},{"categories":["hugo","github","github action"],"content":"新增algolia搜索功能 在algolia创建了index后 , 在API Keys获取上面三个值 https://www.algolia.com/ 在github注册actions的变量 ALGOLIA_APP_ID=你的Application ID ALGOLIA_INDEX_NAME=你的索引名字 ALGOLIA_INDEX_FILE=public/algolia.json ALGOLIA_ADMIN_KEY=你的Admin API Key 配置hugo的config.toml # 搜索配置 [languages.zh-cn.params.search] enable = true # 搜索引擎的类型 (\"lunr\", \"algolia\") type = \"algolia\" # 文章内容最长索引长度 contentLength = 4000 # 搜索框的占位提示语 placeholder = \"搜索\" # 最大结果数目 maxResultLength = 10 # 结果内容片段长度 snippetLength = 50 # 搜索结果中高亮部分的 HTML 标签 highlightTag = \"em\" # 是否在搜索索引中使用基于 baseURL 的绝对路径 absoluteURL = true [languages.zh-cn.params.search.algolia] index = \"index.zh-cn\" #algolia 里面的 index 名称相对应，如果你有多语言版本，那么就需要创建多个语言的 index，我这里仅举例中文的版本 appID = \"\" searchKey = \"\" ","date":"2021-05-23","objectID":"/2021/05/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8hugo%E5%BF%AB%E9%80%9F%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AAgithub%E7%9A%84page/:0:4","tags":["hugo","github"],"title":"如何使用hugo快速创建一个github的page","uri":"/2021/05/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8hugo%E5%BF%AB%E9%80%9F%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AAgithub%E7%9A%84page/"},{"categories":["hugo","github","github action"],"content":"设置构建脚本 cat \u003e\u003e ./.github/workflows/main.yml \u003c\u003cEOT name: Deploy Hugo Site to Github Pages on Master Branch on: push: branches: - master jobs: build-deploy: runs-on: ubuntu-18.04 steps: - uses: actions/checkout@v1 # v2 does not have submodules option now # with: # submodules: true - name: Setup Hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: \"0.83.1\" extended: true - name: Build run: | git clone https://github.com/mmfei/LoveIt themes/LoveIt echo 'gen'; hugo --theme=LoveIt; echo 'build done'; echo 'www.mmfei.com' \u003e public/CNAME - name: Deploy uses: peaceiris/actions-gh-pages@v3 with: deploy_key: ${{ secrets.ACTIONS_DEPLOY_KEY }} # 这里的 ACTIONS_DEPLOY_KEY 则是上面设置 Private Key的变量名 github_token: ${{ secrets.MMFEI_GH_TOKEN }} external_repository: mmfei/mmfei.github.io publish_dir: \"./public\" keep_files: false # remove existing files publish_branch: master # deploying branch commit_message: ${{ github.event.head_commit.message }} user_name: \"mmfei\" user_email: \"wlfkongl@163.com\" - name: Use Node.js uses: actions/setup-node@v1 with: node-version: '12.x' - name: Install automic-algolia run: | npm install -g atomic-algolia atomic-algolia env: ALGOLIA_APP_ID: ${{ secrets.ALGOLIA_APP_ID }} ALGOLIA_ADMIN_KEY: ${{ secrets.ALGOLIA_ADMIN_KEY }} ALGOLIA_INDEX_NAME: ${{ secrets.ALGOLIA_INDEX_NAME }} ALGOLIA_INDEX_FILE: \"./public/index.json\" EOT git add ./.github/workflows/main.yml; git commit -m 'add deploy file'; git push origin master; ","date":"2021-05-23","objectID":"/2021/05/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8hugo%E5%BF%AB%E9%80%9F%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AAgithub%E7%9A%84page/:0:5","tags":["hugo","github"],"title":"如何使用hugo快速创建一个github的page","uri":"/2021/05/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8hugo%E5%BF%AB%E9%80%9F%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AAgithub%E7%9A%84page/"},{"categories":null,"content":"一直在广州的互联网老兵 email : wlfkongl@163.com ","date":"2021-05-22","objectID":"/about/:0:0","tags":null,"title":"About","uri":"/about/"}]